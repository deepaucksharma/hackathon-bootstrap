{
  "timestamp": "2025-06-05T09:55:13.215Z",
  "config": {
    "accountId": "3630072",
    "timeRange": "1 hour ago",
    "clusterName": null
  },
  "summary": {
    "totalQueries": 55,
    "successful": 55,
    "withData": 53,
    "failed": 0
  },
  "scores": {
    "dataAvailability": 100,
    "metricCompleteness": 96.36363636363636,
    "dataFreshness": 100,
    "entityRelationships": 100,
    "overall": 98.9090909090909
  },
  "recommendations": [],
  "categories": {
    "MSK Polling Data": {
      "queries": [
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.1",
            "name": "Cluster Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113707976,
                "end": 1749117307976
              }
            },
            "results": [
              {
                "count": 191
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 191
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.2",
            "name": "All Cluster Metrics Present",
            "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113707915,
                "end": 1749117307915
              }
            },
            "results": [
              {
                "Has Active Controller Count": 191,
                "Has Global Partition Count": 0,
                "Has Offline Partitions Count": 191
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.3",
            "name": "Broker Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113707928,
                "end": 1749117307928
              }
            },
            "results": [
              {
                "count": 97
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 97
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.4",
            "name": "All Broker Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113707964,
                "end": 1749117307964
              }
            },
            "results": [
              {
                "Has Bytes In": 97,
                "Has Bytes Out": 97,
                "Has Messages In": 97,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.5",
            "name": "Topic Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113707935,
                "end": 1749117307935
              }
            },
            "results": [
              {
                "count": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 774
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.6",
            "name": "Topic Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113708419,
                "end": 1749117308419
              }
            },
            "results": [
              {
                "Has Bytes In": 0,
                "Has Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.7",
            "name": "Cluster Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113708390,
                "end": 1749117308390
              }
            },
            "results": [
              {
                "Has Cluster Name": 191,
                "Has Entity GUID": 0,
                "Has Entity Name": 191
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.8",
            "name": "Broker Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113708392,
                "end": 1749117308392
              }
            },
            "results": [
              {
                "Has Broker ID": 97,
                "Has Cluster Name": 97,
                "Has Entity GUID": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.9",
            "name": "Topic Attributes Present",
            "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113708409,
                "end": 1749117308409
              }
            },
            "results": [
              {
                "Has Display Name": 774,
                "Has Entity GUID": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 9,
        "success": 9,
        "hasData": 9,
        "failed": 0
      }
    },
    "Metric Streams Data": {
      "queries": [
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.1",
            "name": "Metric Events Exist",
            "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749113708381,
                "end": 1749117308381
              }
            },
            "results": [
              {
                "count": 4523
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4523
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.2",
            "name": "Cluster-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749113708834,
                "end": 1749117308834
              }
            },
            "results": [
              {
                "Active Controller": 0,
                "Global Partitions": 0,
                "Offline Partitions": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.3",
            "name": "Broker-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749113708805,
                "end": 1749117308805
              }
            },
            "results": [
              {
                "Broker Bytes In": 0,
                "Broker Bytes Out": 0,
                "Under Replicated": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.4",
            "name": "Topic-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749113708810,
                "end": 1749117308810
              }
            },
            "results": [
              {
                "Topic Bytes In": 0,
                "Topic Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.5",
            "name": "Metric Streams Attributes",
            "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749113708828,
                "end": 1749117308828
              }
            },
            "results": [
              {
                "Has Broker ID": 0,
                "Has Cluster Name": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Standard Kafka Integration": {
      "queries": [
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.1",
            "name": "Broker Sample Data",
            "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113708805,
                "end": 1749117308805
              }
            },
            "results": [
              {
                "count": 582
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 582
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.2",
            "name": "Topic Sample Data",
            "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113709269,
                "end": 1749117309269
              }
            },
            "results": [
              {
                "count": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 774
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.3",
            "name": "Offset Sample Data",
            "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaOffsetSample"
              ],
              "timeWindow": {
                "begin": 1749113709246,
                "end": 1749117309246
              }
            },
            "results": [
              {
                "count": 1470
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1470
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.4",
            "name": "Producer Sample Data",
            "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaProducerSample"
              ],
              "timeWindow": {
                "begin": 1749113709226,
                "end": 1749117309226
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.5",
            "name": "Consumer Sample Data",
            "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaConsumerSample"
              ],
              "timeWindow": {
                "begin": 1749113709217,
                "end": 1749117309217
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 3,
        "failed": 0
      }
    },
    "Data Quality": {
      "queries": [
        {
          "category": "Data Quality",
          "query": {
            "id": "4.1",
            "name": "Check for Null Values",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113709221,
                "end": 1749117309221
              }
            },
            "results": [
              {
                "Null Active Controllers": 0,
                "Null Cluster Names": 0,
                "Null Offline Partitions": 0,
                "Total Records": 191
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.2",
            "name": "Data Freshness (Polling)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
            "critical": true
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749117009673,
                "end": 1749117309673
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Age in Seconds": 120,
                "Last Data Point": 1749117180000,
                "Recent Samples": 3,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.3",
            "name": "Data Freshness (Metric Streams)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749117009662,
                "end": 1749117309662
              }
            },
            "results": [
              {
                "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
                "Age in Seconds": 180,
                "Last Data Point": 1749117180000,
                "Recent Samples": 12,
                "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
              },
              {
                "facet": "minikube-kafka-broker-1",
                "Age in Seconds": 180,
                "Last Data Point": 1749117180000,
                "Recent Samples": 3,
                "entity.name": "minikube-kafka-broker-1"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.4",
            "name": "Tag Completeness",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113709660,
                "end": 1749117309660
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Has Cluster Label": 94,
                "Has Environment Label": 94,
                "Has Environment Tag": 97,
                "Has Integration Label": 94,
                "Total Records": 97,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-strimzi-kafka",
                "Has Cluster Label": 94,
                "Has Environment Label": 94,
                "Has Environment Tag": 94,
                "Has Integration Label": 94,
                "Total Records": 94,
                "provider.clusterName": "minikube-strimzi-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.5",
            "name": "Data Consistency Check",
            "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113709660,
                "end": 1749117309660
              }
            },
            "results": [
              {
                "Clusters in ClusterSample": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Throughput Calculations": {
      "queries": [
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.1",
            "name": "Cluster Throughput Summary",
            "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113709643,
                "end": 1749117309643
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Total Bytes In/Sec": 91175.80752890525,
                "Total Bytes Out/Sec": 91327.42920568661,
                "Total Messages In/Sec": 1174.5038441440497,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.2",
            "name": "Throughput Aggregation",
            "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [],
              "timeWindow": {
                "begin": 1749113710203,
                "end": 1749117310203
              }
            },
            "results": [
              {
                "Total Incoming": 939.9567786485077,
                "Total Outgoing": 941.5198887184187
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.3",
            "name": "Topic Throughput",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113710181,
                "end": 1749117310181
              }
            },
            "results": [
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.4",
            "name": "Message Rates",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113710185,
                "end": 1749117310185
              }
            },
            "results": [
              {
                "Total Messages In": 1174.5038441440497
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1174.5038441440497
        }
      ],
      "summary": {
        "total": 4,
        "success": 4,
        "hasData": 4,
        "failed": 0
      }
    },
    "Entity Relationships": {
      "queries": [
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.1",
            "name": "Brokers per Cluster",
            "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113710166,
                "end": 1749117310166
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.2",
            "name": "Topics per Cluster",
            "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113710188,
                "end": 1749117310188
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.3",
            "name": "Entity GUIDs Present",
            "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113710743,
                "end": 1749117310743
              }
            },
            "results": [
              {
                "Total Entity GUIDs": 0,
                "Unique Entity GUIDs": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Health Metrics": {
      "queries": [
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.1",
            "name": "Cluster Health Status",
            "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113710701,
                "end": 1749117310701
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-strimzi-kafka",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "minikube-strimzi-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.2",
            "name": "Broker Health Status",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113710730,
                "end": 1749117310730
              }
            },
            "results": [
              {
                "facet": [
                  "minikube-kafka",
                  "1"
                ],
                "Bytes In Rate": 1366.7666666666667,
                "Bytes Out Rate": 1303.7666666666667,
                "Message Rate": 15.733333333333333
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.3",
            "name": "Unhealthy Cluster Count",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113710689,
                "end": 1749117310689
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Time Series Data": {
      "queries": [
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.1",
            "name": "Throughput Time Series",
            "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113710693,
                "end": 1749117310693
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749113710,
                "endTimeSeconds": 1749114010,
                "Incoming Throughput": 9572.233333333334,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749114010,
                "endTimeSeconds": 1749114310,
                "Incoming Throughput": 9718.219243604004,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749114310,
                "endTimeSeconds": 1749114610,
                "Incoming Throughput": 10047.233333333334,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749114610,
                "endTimeSeconds": 1749114910,
                "Incoming Throughput": 7011.161048689138,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749114910,
                "endTimeSeconds": 1749115210,
                "Incoming Throughput": 9924.11724137931,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749115210,
                "endTimeSeconds": 1749115510,
                "Incoming Throughput": 9678.1,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749115510,
                "endTimeSeconds": 1749115810,
                "Incoming Throughput": 9978.500000000002,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749115810,
                "endTimeSeconds": 1749116110,
                "Incoming Throughput": 9568.4,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749116110,
                "endTimeSeconds": 1749116410,
                "Incoming Throughput": 8430.099999999999,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749116410,
                "endTimeSeconds": 1749116710,
                "Incoming Throughput": 4022.2666666666664,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749116710,
                "endTimeSeconds": 1749117010,
                "Incoming Throughput": 1858.7099952327985,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749117010,
                "endTimeSeconds": 1749117310,
                "Incoming Throughput": 1366.7666666666667,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.2",
            "name": "Message Rate Time Series",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113711290,
                "end": 1749117311290
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749113711,
                "endTimeSeconds": 1749114011,
                "Message Rate": 126.10000000000001
              },
              {
                "beginTimeSeconds": 1749114011,
                "endTimeSeconds": 1749114311,
                "Message Rate": 127.02313681868743
              },
              {
                "beginTimeSeconds": 1749114311,
                "endTimeSeconds": 1749114611,
                "Message Rate": 128.93333333333334
              },
              {
                "beginTimeSeconds": 1749114611,
                "endTimeSeconds": 1749114911,
                "Message Rate": 90.67790262172285
              },
              {
                "beginTimeSeconds": 1749114911,
                "endTimeSeconds": 1749115211,
                "Message Rate": 126.07230255839822
              },
              {
                "beginTimeSeconds": 1749115211,
                "endTimeSeconds": 1749115511,
                "Message Rate": 122.30000000000001
              },
              {
                "beginTimeSeconds": 1749115511,
                "endTimeSeconds": 1749115811,
                "Message Rate": 128.53333333333333
              },
              {
                "beginTimeSeconds": 1749115811,
                "endTimeSeconds": 1749116111,
                "Message Rate": 126.03333333333333
              },
              {
                "beginTimeSeconds": 1749116111,
                "endTimeSeconds": 1749116411,
                "Message Rate": 107.98333333333335
              },
              {
                "beginTimeSeconds": 1749116411,
                "endTimeSeconds": 1749116711,
                "Message Rate": 54.233333333333334
              },
              {
                "beginTimeSeconds": 1749116711,
                "endTimeSeconds": 1749117011,
                "Message Rate": 20.880502145240744
              },
              {
                "beginTimeSeconds": 1749117011,
                "endTimeSeconds": 1749117311,
                "Message Rate": 15.733333333333333
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.3",
            "name": "Partition Count Trend",
            "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113711272,
                "end": 1749117311272
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749113711,
                "endTimeSeconds": 1749114311,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749114311,
                "endTimeSeconds": 1749114911,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749114911,
                "endTimeSeconds": 1749115511,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749115511,
                "endTimeSeconds": 1749116111,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749116111,
                "endTimeSeconds": 1749116711,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749116711,
                "endTimeSeconds": 1749117311,
                "Partitions": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Account Aggregation": {
      "queries": [
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.1",
            "name": "Account Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113711278,
                "end": 1749117311278
              }
            },
            "results": [
              {
                "Cluster Count": 0,
                "Named Cluster Count": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.2",
            "name": "Account Health Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113711310,
                "end": 1749117311310
              }
            },
            "results": [
              {
                "Total Clusters": 0,
                "Unhealthy Clusters": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Performance Metrics": {
      "queries": [
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.1",
            "name": "Data Volume Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113711273,
                "end": 1749117311273
              }
            },
            "results": [
              {
                "Broker Events": 97,
                "Cluster Events": 191,
                "Topic Events": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.2",
            "name": "Large Dataset Check",
            "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113711734,
                "end": 1749117311734
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "Total Events": 774,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Edge Cases": {
      "queries": [
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.1",
            "name": "Idle Topics",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113711726,
                "end": 1749117311726
              }
            },
            "results": [
              {
                "Avg Bytes In": null,
                "Avg Bytes Out": null,
                "Total Topics": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.2",
            "name": "Stale Data Detection",
            "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113711702,
                "end": 1749117311702
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Earliest Timestamp": 1749113720000,
                "Latest Timestamp": 1749117180000,
                "Total Samples": 97,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-strimzi-kafka",
                "Earliest Timestamp": 1749113720000,
                "Latest Timestamp": 1749116772000,
                "Total Samples": 94,
                "provider.clusterName": "minikube-strimzi-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.3",
            "name": "Partial Data Check",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113711720,
                "end": 1749117311720
              }
            },
            "results": [
              {
                "Missing Bytes In": 774,
                "Missing Bytes Out": 774,
                "Total Topics": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Top N Analysis": {
      "queries": [
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.1",
            "name": "Top 10 Topics by Throughput",
            "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113711719,
                "end": 1749117311719
              }
            },
            "results": [
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
                "Avg Bytes In": null,
                "Sample Count": 194,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
                "Avg Bytes In": null,
                "Sample Count": 194,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
                "Avg Bytes In": null,
                "Sample Count": 193,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
                "Avg Bytes In": null,
                "Sample Count": 193,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.2",
            "name": "Top 5 Clusters by Size",
            "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113712328,
                "end": 1749117312328
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "Topic Count": 5,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Confluent Cloud Compatibility": {
      "queries": [
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.1",
            "name": "Common Throughput Pattern",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113712345,
                "end": 1749117312345
              }
            },
            "results": [
              {
                "Has Bytes In": 97,
                "Has Bytes Out": 97
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.2",
            "name": "Common Message Pattern",
            "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113712299,
                "end": 1749117312299
              }
            },
            "results": [
              {
                "Has Messages In": 97,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Filter Validation": {
      "queries": [
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.1",
            "name": "Available Clusters",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113712304,
                "end": 1749117312304
              }
            },
            "results": [
              {
                "Total Samples": 191
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 191
        },
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.2",
            "name": "Available Topics",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113712303,
                "end": 1749117312303
              }
            },
            "results": [
              {
                "Total Samples": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 774
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Metric Calculations": {
      "queries": [
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.1",
            "name": "Throughput Range",
            "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113712901,
                "end": 1749117312901
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Avg Throughput": 939.9567786485077,
                "Max Throughput": 1507.8620689655172,
                "Min Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.2",
            "name": "Percentage Calculations",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749113712827,
                "end": 1749117312827
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0,
                "Unhealthy %": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Summary Verification": {
      "queries": [
        {
          "category": "Summary Verification",
          "query": {
            "id": "16.1",
            "name": "Complete Data Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113712845,
                "end": 1749117312845
              }
            },
            "results": [
              {
                "Has Broker Data": 97,
                "Has Cluster Data": 191,
                "Has Topic Data": 774,
                "Newest Data": 1749117180000,
                "Oldest Data": 1749113720000
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 1,
        "success": 1,
        "hasData": 1,
        "failed": 0
      }
    },
    "Standard vs MSK Comparison": {
      "queries": [
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.1",
            "name": "Entity Count Comparison",
            "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample",
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749113712831,
                "end": 1749117312831
              }
            },
            "results": [
              {
                "MSK Brokers": 1,
                "Standard Brokers": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.2",
            "name": "Metric Coverage Comparison",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749113712846,
                "end": 1749117312846
              }
            },
            "results": [
              {
                "MSK Topic Events": 774,
                "Standard Topic Events": 774
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    }
  },
  "details": [
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.1",
        "name": "Cluster Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113707976,
            "end": 1749117307976
          }
        },
        "results": [
          {
            "count": 191
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 191
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.2",
        "name": "All Cluster Metrics Present",
        "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113707915,
            "end": 1749117307915
          }
        },
        "results": [
          {
            "Has Active Controller Count": 191,
            "Has Global Partition Count": 0,
            "Has Offline Partitions Count": 191
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.3",
        "name": "Broker Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113707928,
            "end": 1749117307928
          }
        },
        "results": [
          {
            "count": 97
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 97
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.4",
        "name": "All Broker Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113707964,
            "end": 1749117307964
          }
        },
        "results": [
          {
            "Has Bytes In": 97,
            "Has Bytes Out": 97,
            "Has Messages In": 97,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.5",
        "name": "Topic Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113707935,
            "end": 1749117307935
          }
        },
        "results": [
          {
            "count": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 774
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.6",
        "name": "Topic Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113708419,
            "end": 1749117308419
          }
        },
        "results": [
          {
            "Has Bytes In": 0,
            "Has Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.7",
        "name": "Cluster Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113708390,
            "end": 1749117308390
          }
        },
        "results": [
          {
            "Has Cluster Name": 191,
            "Has Entity GUID": 0,
            "Has Entity Name": 191
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.8",
        "name": "Broker Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113708392,
            "end": 1749117308392
          }
        },
        "results": [
          {
            "Has Broker ID": 97,
            "Has Cluster Name": 97,
            "Has Entity GUID": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.9",
        "name": "Topic Attributes Present",
        "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113708409,
            "end": 1749117308409
          }
        },
        "results": [
          {
            "Has Display Name": 774,
            "Has Entity GUID": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.1",
        "name": "Metric Events Exist",
        "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749113708381,
            "end": 1749117308381
          }
        },
        "results": [
          {
            "count": 4523
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4523
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.2",
        "name": "Cluster-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749113708834,
            "end": 1749117308834
          }
        },
        "results": [
          {
            "Active Controller": 0,
            "Global Partitions": 0,
            "Offline Partitions": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.3",
        "name": "Broker-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749113708805,
            "end": 1749117308805
          }
        },
        "results": [
          {
            "Broker Bytes In": 0,
            "Broker Bytes Out": 0,
            "Under Replicated": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.4",
        "name": "Topic-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749113708810,
            "end": 1749117308810
          }
        },
        "results": [
          {
            "Topic Bytes In": 0,
            "Topic Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.5",
        "name": "Metric Streams Attributes",
        "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749113708828,
            "end": 1749117308828
          }
        },
        "results": [
          {
            "Has Broker ID": 0,
            "Has Cluster Name": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.1",
        "name": "Broker Sample Data",
        "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113708805,
            "end": 1749117308805
          }
        },
        "results": [
          {
            "count": 582
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 582
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.2",
        "name": "Topic Sample Data",
        "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113709269,
            "end": 1749117309269
          }
        },
        "results": [
          {
            "count": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 774
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.3",
        "name": "Offset Sample Data",
        "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaOffsetSample"
          ],
          "timeWindow": {
            "begin": 1749113709246,
            "end": 1749117309246
          }
        },
        "results": [
          {
            "count": 1470
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1470
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.4",
        "name": "Producer Sample Data",
        "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaProducerSample"
          ],
          "timeWindow": {
            "begin": 1749113709226,
            "end": 1749117309226
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.5",
        "name": "Consumer Sample Data",
        "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaConsumerSample"
          ],
          "timeWindow": {
            "begin": 1749113709217,
            "end": 1749117309217
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.1",
        "name": "Check for Null Values",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113709221,
            "end": 1749117309221
          }
        },
        "results": [
          {
            "Null Active Controllers": 0,
            "Null Cluster Names": 0,
            "Null Offline Partitions": 0,
            "Total Records": 191
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.2",
        "name": "Data Freshness (Polling)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
        "critical": true
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749117009673,
            "end": 1749117309673
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Age in Seconds": 120,
            "Last Data Point": 1749117180000,
            "Recent Samples": 3,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.3",
        "name": "Data Freshness (Metric Streams)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749117009662,
            "end": 1749117309662
          }
        },
        "results": [
          {
            "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
            "Age in Seconds": 180,
            "Last Data Point": 1749117180000,
            "Recent Samples": 12,
            "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
          },
          {
            "facet": "minikube-kafka-broker-1",
            "Age in Seconds": 180,
            "Last Data Point": 1749117180000,
            "Recent Samples": 3,
            "entity.name": "minikube-kafka-broker-1"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.4",
        "name": "Tag Completeness",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113709660,
            "end": 1749117309660
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Has Cluster Label": 94,
            "Has Environment Label": 94,
            "Has Environment Tag": 97,
            "Has Integration Label": 94,
            "Total Records": 97,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-strimzi-kafka",
            "Has Cluster Label": 94,
            "Has Environment Label": 94,
            "Has Environment Tag": 94,
            "Has Integration Label": 94,
            "Total Records": 94,
            "provider.clusterName": "minikube-strimzi-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.5",
        "name": "Data Consistency Check",
        "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113709660,
            "end": 1749117309660
          }
        },
        "results": [
          {
            "Clusters in ClusterSample": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.1",
        "name": "Cluster Throughput Summary",
        "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113709643,
            "end": 1749117309643
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Total Bytes In/Sec": 91175.80752890525,
            "Total Bytes Out/Sec": 91327.42920568661,
            "Total Messages In/Sec": 1174.5038441440497,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.2",
        "name": "Throughput Aggregation",
        "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [],
          "timeWindow": {
            "begin": 1749113710203,
            "end": 1749117310203
          }
        },
        "results": [
          {
            "Total Incoming": 939.9567786485077,
            "Total Outgoing": 941.5198887184187
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.3",
        "name": "Topic Throughput",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113710181,
            "end": 1749117310181
          }
        },
        "results": [
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.4",
        "name": "Message Rates",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113710185,
            "end": 1749117310185
          }
        },
        "results": [
          {
            "Total Messages In": 1174.5038441440497
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1174.5038441440497
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.1",
        "name": "Brokers per Cluster",
        "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113710166,
            "end": 1749117310166
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.2",
        "name": "Topics per Cluster",
        "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113710188,
            "end": 1749117310188
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.3",
        "name": "Entity GUIDs Present",
        "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113710743,
            "end": 1749117310743
          }
        },
        "results": [
          {
            "Total Entity GUIDs": 0,
            "Unique Entity GUIDs": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.1",
        "name": "Cluster Health Status",
        "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113710701,
            "end": 1749117310701
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-strimzi-kafka",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "minikube-strimzi-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.2",
        "name": "Broker Health Status",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113710730,
            "end": 1749117310730
          }
        },
        "results": [
          {
            "facet": [
              "minikube-kafka",
              "1"
            ],
            "Bytes In Rate": 1366.7666666666667,
            "Bytes Out Rate": 1303.7666666666667,
            "Message Rate": 15.733333333333333
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.3",
        "name": "Unhealthy Cluster Count",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113710689,
            "end": 1749117310689
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.1",
        "name": "Throughput Time Series",
        "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113710693,
            "end": 1749117310693
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749113710,
            "endTimeSeconds": 1749114010,
            "Incoming Throughput": 9572.233333333334,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749114010,
            "endTimeSeconds": 1749114310,
            "Incoming Throughput": 9718.219243604004,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749114310,
            "endTimeSeconds": 1749114610,
            "Incoming Throughput": 10047.233333333334,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749114610,
            "endTimeSeconds": 1749114910,
            "Incoming Throughput": 7011.161048689138,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749114910,
            "endTimeSeconds": 1749115210,
            "Incoming Throughput": 9924.11724137931,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749115210,
            "endTimeSeconds": 1749115510,
            "Incoming Throughput": 9678.1,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749115510,
            "endTimeSeconds": 1749115810,
            "Incoming Throughput": 9978.500000000002,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749115810,
            "endTimeSeconds": 1749116110,
            "Incoming Throughput": 9568.4,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749116110,
            "endTimeSeconds": 1749116410,
            "Incoming Throughput": 8430.099999999999,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749116410,
            "endTimeSeconds": 1749116710,
            "Incoming Throughput": 4022.2666666666664,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749116710,
            "endTimeSeconds": 1749117010,
            "Incoming Throughput": 1858.7099952327985,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749117010,
            "endTimeSeconds": 1749117310,
            "Incoming Throughput": 1366.7666666666667,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.2",
        "name": "Message Rate Time Series",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113711290,
            "end": 1749117311290
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749113711,
            "endTimeSeconds": 1749114011,
            "Message Rate": 126.10000000000001
          },
          {
            "beginTimeSeconds": 1749114011,
            "endTimeSeconds": 1749114311,
            "Message Rate": 127.02313681868743
          },
          {
            "beginTimeSeconds": 1749114311,
            "endTimeSeconds": 1749114611,
            "Message Rate": 128.93333333333334
          },
          {
            "beginTimeSeconds": 1749114611,
            "endTimeSeconds": 1749114911,
            "Message Rate": 90.67790262172285
          },
          {
            "beginTimeSeconds": 1749114911,
            "endTimeSeconds": 1749115211,
            "Message Rate": 126.07230255839822
          },
          {
            "beginTimeSeconds": 1749115211,
            "endTimeSeconds": 1749115511,
            "Message Rate": 122.30000000000001
          },
          {
            "beginTimeSeconds": 1749115511,
            "endTimeSeconds": 1749115811,
            "Message Rate": 128.53333333333333
          },
          {
            "beginTimeSeconds": 1749115811,
            "endTimeSeconds": 1749116111,
            "Message Rate": 126.03333333333333
          },
          {
            "beginTimeSeconds": 1749116111,
            "endTimeSeconds": 1749116411,
            "Message Rate": 107.98333333333335
          },
          {
            "beginTimeSeconds": 1749116411,
            "endTimeSeconds": 1749116711,
            "Message Rate": 54.233333333333334
          },
          {
            "beginTimeSeconds": 1749116711,
            "endTimeSeconds": 1749117011,
            "Message Rate": 20.880502145240744
          },
          {
            "beginTimeSeconds": 1749117011,
            "endTimeSeconds": 1749117311,
            "Message Rate": 15.733333333333333
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.3",
        "name": "Partition Count Trend",
        "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113711272,
            "end": 1749117311272
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749113711,
            "endTimeSeconds": 1749114311,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749114311,
            "endTimeSeconds": 1749114911,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749114911,
            "endTimeSeconds": 1749115511,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749115511,
            "endTimeSeconds": 1749116111,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749116111,
            "endTimeSeconds": 1749116711,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749116711,
            "endTimeSeconds": 1749117311,
            "Partitions": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.1",
        "name": "Account Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113711278,
            "end": 1749117311278
          }
        },
        "results": [
          {
            "Cluster Count": 0,
            "Named Cluster Count": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.2",
        "name": "Account Health Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113711310,
            "end": 1749117311310
          }
        },
        "results": [
          {
            "Total Clusters": 0,
            "Unhealthy Clusters": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.1",
        "name": "Data Volume Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113711273,
            "end": 1749117311273
          }
        },
        "results": [
          {
            "Broker Events": 97,
            "Cluster Events": 191,
            "Topic Events": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.2",
        "name": "Large Dataset Check",
        "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113711734,
            "end": 1749117311734
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "Total Events": 774,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.1",
        "name": "Idle Topics",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113711726,
            "end": 1749117311726
          }
        },
        "results": [
          {
            "Avg Bytes In": null,
            "Avg Bytes Out": null,
            "Total Topics": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.2",
        "name": "Stale Data Detection",
        "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113711702,
            "end": 1749117311702
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Earliest Timestamp": 1749113720000,
            "Latest Timestamp": 1749117180000,
            "Total Samples": 97,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-strimzi-kafka",
            "Earliest Timestamp": 1749113720000,
            "Latest Timestamp": 1749116772000,
            "Total Samples": 94,
            "provider.clusterName": "minikube-strimzi-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.3",
        "name": "Partial Data Check",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113711720,
            "end": 1749117311720
          }
        },
        "results": [
          {
            "Missing Bytes In": 774,
            "Missing Bytes Out": 774,
            "Total Topics": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.1",
        "name": "Top 10 Topics by Throughput",
        "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113711719,
            "end": 1749117311719
          }
        },
        "results": [
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
            "Avg Bytes In": null,
            "Sample Count": 194,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
            "Avg Bytes In": null,
            "Sample Count": 194,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
            "Avg Bytes In": null,
            "Sample Count": 193,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
            "Avg Bytes In": null,
            "Sample Count": 193,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.2",
        "name": "Top 5 Clusters by Size",
        "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113712328,
            "end": 1749117312328
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "Topic Count": 5,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.1",
        "name": "Common Throughput Pattern",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113712345,
            "end": 1749117312345
          }
        },
        "results": [
          {
            "Has Bytes In": 97,
            "Has Bytes Out": 97
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.2",
        "name": "Common Message Pattern",
        "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113712299,
            "end": 1749117312299
          }
        },
        "results": [
          {
            "Has Messages In": 97,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.1",
        "name": "Available Clusters",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113712304,
            "end": 1749117312304
          }
        },
        "results": [
          {
            "Total Samples": 191
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 191
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.2",
        "name": "Available Topics",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113712303,
            "end": 1749117312303
          }
        },
        "results": [
          {
            "Total Samples": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 774
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.1",
        "name": "Throughput Range",
        "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113712901,
            "end": 1749117312901
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Avg Throughput": 939.9567786485077,
            "Max Throughput": 1507.8620689655172,
            "Min Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.2",
        "name": "Percentage Calculations",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749113712827,
            "end": 1749117312827
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0,
            "Unhealthy %": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Summary Verification",
      "query": {
        "id": "16.1",
        "name": "Complete Data Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113712845,
            "end": 1749117312845
          }
        },
        "results": [
          {
            "Has Broker Data": 97,
            "Has Cluster Data": 191,
            "Has Topic Data": 774,
            "Newest Data": 1749117180000,
            "Oldest Data": 1749113720000
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.1",
        "name": "Entity Count Comparison",
        "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample",
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749113712831,
            "end": 1749117312831
          }
        },
        "results": [
          {
            "MSK Brokers": 1,
            "Standard Brokers": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.2",
        "name": "Metric Coverage Comparison",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749113712846,
            "end": 1749117312846
          }
        },
        "results": [
          {
            "MSK Topic Events": 774,
            "Standard Topic Events": 774
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    }
  ]
}