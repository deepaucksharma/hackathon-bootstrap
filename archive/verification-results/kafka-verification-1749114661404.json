{
  "timestamp": "2025-06-05T09:11:01.401Z",
  "config": {
    "accountId": "1",
    "timeRange": "1 hour ago",
    "clusterName": null
  },
  "summary": {
    "totalQueries": 55,
    "successful": 55,
    "withData": 48,
    "failed": 0
  },
  "scores": {
    "dataAvailability": 90,
    "metricCompleteness": 87.27272727272727,
    "dataFreshness": 0,
    "entityRelationships": 100,
    "overall": 72.18181818181819
  },
  "recommendations": [
    {
      "severity": "critical",
      "category": "Data Availability",
      "message": "Critical data sources are missing. Check MSK integration configuration.",
      "details": [
        "- Data Freshness (Polling): No data found"
      ]
    },
    {
      "severity": "warning",
      "category": "Data Freshness",
      "message": "Some data sources have stale data (>5 minutes old).",
      "details": [
        "Check polling intervals and network connectivity"
      ]
    }
  ],
  "categories": {
    "MSK Polling Data": {
      "queries": [
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.1",
            "name": "Cluster Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111042121,
                "end": 1749114642121
              }
            },
            "results": [
              {
                "count": 110
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 110
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.2",
            "name": "All Cluster Metrics Present",
            "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111042119,
                "end": 1749114642119
              }
            },
            "results": [
              {
                "Has Active Controller Count": 110,
                "Has Global Partition Count": 110,
                "Has Offline Partitions Count": 110
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.3",
            "name": "Broker Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111042092,
                "end": 1749114642092
              }
            },
            "results": [
              {
                "count": 550
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 550
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.4",
            "name": "All Broker Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111042078,
                "end": 1749114642078
              }
            },
            "results": [
              {
                "Has Bytes In": 220,
                "Has Bytes Out": 220,
                "Has Messages In": 220,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.5",
            "name": "Topic Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111042081,
                "end": 1749114642081
              }
            },
            "results": [
              {
                "count": 330
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 330
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.6",
            "name": "Topic Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111043876,
                "end": 1749114643876
              }
            },
            "results": [
              {
                "Has Bytes In": 275,
                "Has Bytes Out": 110
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.7",
            "name": "Cluster Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111043833,
                "end": 1749114643833
              }
            },
            "results": [
              {
                "Has Cluster Name": 110,
                "Has Entity GUID": 0,
                "Has Entity Name": 110
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.8",
            "name": "Broker Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111043867,
                "end": 1749114643867
              }
            },
            "results": [
              {
                "Has Broker ID": 550,
                "Has Cluster Name": 550,
                "Has Entity GUID": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.9",
            "name": "Topic Attributes Present",
            "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111043832,
                "end": 1749114643832
              }
            },
            "results": [
              {
                "Has Display Name": 330,
                "Has Entity GUID": 0,
                "Has Topic Name": 330
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 9,
        "success": 9,
        "hasData": 9,
        "failed": 0
      }
    },
    "Metric Streams Data": {
      "queries": [
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.1",
            "name": "Metric Events Exist",
            "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749111043843,
                "end": 1749114643843
              }
            },
            "results": [
              {
                "count": 2656755152
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2656755152
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.2",
            "name": "Cluster-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749111046005,
                "end": 1749114646005
              }
            },
            "results": [
              {
                "Active Controller": 0,
                "Global Partitions": 0,
                "Offline Partitions": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.3",
            "name": "Broker-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749111046034,
                "end": 1749114646034
              }
            },
            "results": [
              {
                "Broker Bytes In": 0,
                "Broker Bytes Out": 0,
                "Under Replicated": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.4",
            "name": "Topic-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749111045993,
                "end": 1749114645993
              }
            },
            "results": [
              {
                "Topic Bytes In": 0,
                "Topic Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.5",
            "name": "Metric Streams Attributes",
            "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749111046001,
                "end": 1749114646001
              }
            },
            "results": [
              {
                "Has Broker ID": 0,
                "Has Cluster Name": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Standard Kafka Integration": {
      "queries": [
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.1",
            "name": "Broker Sample Data",
            "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111046042,
                "end": 1749114646042
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.2",
            "name": "Topic Sample Data",
            "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111047136,
                "end": 1749114647136
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.3",
            "name": "Offset Sample Data",
            "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaOffsetSample"
              ],
              "timeWindow": {
                "begin": 1749111047109,
                "end": 1749114647109
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.4",
            "name": "Producer Sample Data",
            "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaProducerSample"
              ],
              "timeWindow": {
                "begin": 1749111047160,
                "end": 1749114647160
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.5",
            "name": "Consumer Sample Data",
            "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaConsumerSample"
              ],
              "timeWindow": {
                "begin": 1749111047118,
                "end": 1749114647118
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 0,
        "failed": 0
      }
    },
    "Data Quality": {
      "queries": [
        {
          "category": "Data Quality",
          "query": {
            "id": "4.1",
            "name": "Check for Null Values",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111047148,
                "end": 1749114647148
              }
            },
            "results": [
              {
                "Null Active Controllers": 0,
                "Null Cluster Names": 0,
                "Null Offline Partitions": 0,
                "Total Records": 110
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.2",
            "name": "Data Freshness (Polling)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
            "critical": true
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749114347563,
                "end": 1749114647563
              }
            },
            "results": []
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.3",
            "name": "Data Freshness (Metric Streams)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749114347569,
                "end": 1749114647569
              }
            },
            "results": []
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.4",
            "name": "Tag Completeness",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111047531,
                "end": 1749114647531
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Has Cluster Label": 0,
                "Has Environment Label": 0,
                "Has Environment Tag": 0,
                "Has Integration Label": 0,
                "Total Records": 55,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Has Cluster Label": 0,
                "Has Environment Label": 0,
                "Has Environment Tag": 0,
                "Has Integration Label": 0,
                "Total Records": 55,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.5",
            "name": "Data Consistency Check",
            "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111047518,
                "end": 1749114647518
              }
            },
            "results": [
              {
                "Clusters in ClusterSample": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 3,
        "failed": 0
      }
    },
    "Throughput Calculations": {
      "queries": [
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.1",
            "name": "Cluster Throughput Summary",
            "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111047523,
                "end": 1749114647523
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Total Bytes In/Sec": 1785.5034984174713,
                "Total Bytes Out/Sec": 365.2634008676979,
                "Total Messages In/Sec": 9.589418107696716,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Total Bytes In/Sec": 0,
                "Total Bytes Out/Sec": 0,
                "Total Messages In/Sec": 0,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.2",
            "name": "Throughput Aggregation",
            "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [],
              "timeWindow": {
                "begin": 1749111049482,
                "end": 1749114649482
              }
            },
            "results": [
              {
                "Total Incoming": 32.46369997122675,
                "Total Outgoing": 6.6411527430490525
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.3",
            "name": "Topic Throughput",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111049482,
                "end": 1749114649482
              }
            },
            "results": [
              {
                "facet": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
                "Bytes In/Sec": 15.48559201233014,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
                "latest": 15.48559201233014
              },
              {
                "facet": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
                "Bytes In/Sec": 13.091593448443236,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
                "latest": 13.091593448443236
              },
              {
                "facet": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
                "Bytes In/Sec": 2.4276543625907365,
                "Bytes Out/Sec": 6.641152743049054,
                "displayName": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
                "latest": 2.4276543625907365
              },
              {
                "facet": "3:pchawla-test:__consumer_offsets",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "3:pchawla-test:__consumer_offsets",
                "latest": 0
              },
              {
                "facet": "2:pchawla-test:__consumer_offsets",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "2:pchawla-test:__consumer_offsets",
                "latest": 0
              },
              {
                "facet": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
                "latest": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.4",
            "name": "Message Rates",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111049529,
                "end": 1749114649529
              }
            },
            "results": [
              {
                "Total Messages In": 9.589418107696716
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 9.589418107696716
        }
      ],
      "summary": {
        "total": 4,
        "success": 4,
        "hasData": 4,
        "failed": 0
      }
    },
    "Entity Relationships": {
      "queries": [
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.1",
            "name": "Brokers per Cluster",
            "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111049528,
                "end": 1749114649528
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Broker Count": 2,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Broker Count": 2,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.2",
            "name": "Topics per Cluster",
            "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111049493,
                "end": 1749114649493
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Topic Count": 4,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Topic Count": 2,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.3",
            "name": "Entity GUIDs Present",
            "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111051683,
                "end": 1749114651683
              }
            },
            "results": [
              {
                "Total Entity GUIDs": 0,
                "Unique Entity GUIDs": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Health Metrics": {
      "queries": [
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.1",
            "name": "Cluster Health Status",
            "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111051636,
                "end": 1749114651636
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.2",
            "name": "Broker Health Status",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111051649,
                "end": 1749114651649
              }
            },
            "results": [
              {
                "facet": [
                  "autodiscover-msk-cluster-auth-bob",
                  "1"
                ],
                "Bytes In Rate": 16.831352667435223,
                "Bytes Out Rate": 0,
                "Message Rate": 0.08565573876557363
              },
              {
                "facet": [
                  "autodiscover-msk-cluster-auth-bob",
                  "2"
                ],
                "Bytes In Rate": 15.730220805980986,
                "Bytes Out Rate": 6.641152743049054,
                "Message Rate": 0.08869731773800299
              },
              {
                "facet": [
                  "pchawla-test",
                  "2"
                ],
                "Bytes In Rate": 0,
                "Bytes Out Rate": 0,
                "Message Rate": 0
              },
              {
                "facet": [
                  "pchawla-test",
                  "3"
                ],
                "Bytes In Rate": 0,
                "Bytes Out Rate": 0,
                "Message Rate": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.3",
            "name": "Unhealthy Cluster Count",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111051638,
                "end": 1749114651638
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Time Series Data": {
      "queries": [
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.1",
            "name": "Throughput Time Series",
            "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111051677,
                "end": 1749114651677
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749111051,
                "endTimeSeconds": 1749111351,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749111351,
                "endTimeSeconds": 1749111651,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749111651,
                "endTimeSeconds": 1749111951,
                "Incoming Throughput": 158.7705854017658,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749111951,
                "endTimeSeconds": 1749112251,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749112251,
                "endTimeSeconds": 1749112551,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749112551,
                "endTimeSeconds": 1749112851,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749112851,
                "endTimeSeconds": 1749113151,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749113151,
                "endTimeSeconds": 1749113451,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749113451,
                "endTimeSeconds": 1749113751,
                "Incoming Throughput": 162.80786736708106,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749113751,
                "endTimeSeconds": 1749114051,
                "Incoming Throughput": 162.80786736708103,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749114051,
                "endTimeSeconds": 1749114351,
                "Incoming Throughput": 161.46210671197596,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "beginTimeSeconds": 1749114351,
                "endTimeSeconds": 1749114651,
                "Incoming Throughput": 0,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749111051,
                "endTimeSeconds": 1749111351,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749111351,
                "endTimeSeconds": 1749111651,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749111651,
                "endTimeSeconds": 1749111951,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749111951,
                "endTimeSeconds": 1749112251,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749112251,
                "endTimeSeconds": 1749112551,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749112551,
                "endTimeSeconds": 1749112851,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749112851,
                "endTimeSeconds": 1749113151,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749113151,
                "endTimeSeconds": 1749113451,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749113451,
                "endTimeSeconds": 1749113751,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749113751,
                "endTimeSeconds": 1749114051,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749114051,
                "endTimeSeconds": 1749114351,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "pchawla-test",
                "beginTimeSeconds": 1749114351,
                "endTimeSeconds": 1749114651,
                "Incoming Throughput": 0,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 24
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.2",
            "name": "Message Rate Time Series",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111053638,
                "end": 1749114653638
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749111053,
                "endTimeSeconds": 1749111353,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749111353,
                "endTimeSeconds": 1749111653,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749111653,
                "endTimeSeconds": 1749111953,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749111953,
                "endTimeSeconds": 1749112253,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749112253,
                "endTimeSeconds": 1749112553,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749112553,
                "endTimeSeconds": 1749112853,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749112853,
                "endTimeSeconds": 1749113153,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749113153,
                "endTimeSeconds": 1749113453,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749113453,
                "endTimeSeconds": 1749113753,
                "Message Rate": 0.8717652825178832
              },
              {
                "beginTimeSeconds": 1749113753,
                "endTimeSeconds": 1749114053,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749114053,
                "endTimeSeconds": 1749114353,
                "Message Rate": 0.8717652825178831
              },
              {
                "beginTimeSeconds": 1749114353,
                "endTimeSeconds": 1749114653,
                "Message Rate": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.3",
            "name": "Partition Count Trend",
            "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111053618,
                "end": 1749114653618
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749111053,
                "endTimeSeconds": 1749111653,
                "Partitions": 26.25
              },
              {
                "beginTimeSeconds": 1749111653,
                "endTimeSeconds": 1749112253,
                "Partitions": 26.25
              },
              {
                "beginTimeSeconds": 1749112253,
                "endTimeSeconds": 1749112853,
                "Partitions": 26.25
              },
              {
                "beginTimeSeconds": 1749112853,
                "endTimeSeconds": 1749113453,
                "Partitions": 26.25
              },
              {
                "beginTimeSeconds": 1749113453,
                "endTimeSeconds": 1749114053,
                "Partitions": 26.25
              },
              {
                "beginTimeSeconds": 1749114053,
                "endTimeSeconds": 1749114653,
                "Partitions": 26.25
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Account Aggregation": {
      "queries": [
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.1",
            "name": "Account Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111053606,
                "end": 1749114653606
              }
            },
            "results": [
              {
                "Cluster Count": 0,
                "Named Cluster Count": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.2",
            "name": "Account Health Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111053639,
                "end": 1749114653639
              }
            },
            "results": [
              {
                "Total Clusters": 0,
                "Unhealthy Clusters": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Performance Metrics": {
      "queries": [
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.1",
            "name": "Data Volume Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111053618,
                "end": 1749114653618
              }
            },
            "results": [
              {
                "Broker Events": 550,
                "Cluster Events": 110,
                "Topic Events": 330
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.2",
            "name": "Large Dataset Check",
            "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111054934,
                "end": 1749114654934
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Topic Count": 4,
                "Total Events": 220,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Topic Count": 2,
                "Total Events": 110,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Edge Cases": {
      "queries": [
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.1",
            "name": "Idle Topics",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111054885,
                "end": 1749114654885
              }
            },
            "results": [
              {
                "Avg Bytes In": 6.200967964672821,
                "Avg Bytes Out": 3.3205763715245267,
                "Total Topics": 330
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.2",
            "name": "Stale Data Detection",
            "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111054895,
                "end": 1749114654895
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Earliest Timestamp": 1749111060000,
                "Latest Timestamp": 1749114300000,
                "Total Samples": 55,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Earliest Timestamp": 1749111060000,
                "Latest Timestamp": 1749114300000,
                "Total Samples": 55,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.3",
            "name": "Partial Data Check",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111054890,
                "end": 1749114654890
              }
            },
            "results": [
              {
                "Missing Bytes In": 55,
                "Missing Bytes Out": 220,
                "Total Topics": 330
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Top N Analysis": {
      "queries": [
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.1",
            "name": "Top 10 Topics by Throughput",
            "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111054913,
                "end": 1749114654913
              }
            },
            "results": [
              {
                "facet": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
                "Avg Bytes In": 2.4276543625907365,
                "Sample Count": 55,
                "displayName": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary"
              },
              {
                "facet": "3:pchawla-test:__consumer_offsets",
                "Avg Bytes In": 0,
                "Sample Count": 55,
                "displayName": "3:pchawla-test:__consumer_offsets"
              },
              {
                "facet": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
                "Avg Bytes In": 13.091593448443238,
                "Sample Count": 55,
                "displayName": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets"
              },
              {
                "facet": "2:pchawla-test:__consumer_offsets",
                "Avg Bytes In": 0,
                "Sample Count": 55,
                "displayName": "2:pchawla-test:__consumer_offsets"
              },
              {
                "facet": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
                "Avg Bytes In": null,
                "Sample Count": 55,
                "displayName": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary"
              },
              {
                "facet": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
                "Avg Bytes In": 15.485592012330141,
                "Sample Count": 55,
                "displayName": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        },
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.2",
            "name": "Top 5 Clusters by Size",
            "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111057575,
                "end": 1749114657575
              }
            },
            "results": [
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Broker Count": 2,
                "Topic Count": 6,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              },
              {
                "facet": "pchawla-test",
                "Broker Count": 2,
                "Topic Count": 4,
                "provider.clusterName": "pchawla-test"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Confluent Cloud Compatibility": {
      "queries": [
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.1",
            "name": "Common Throughput Pattern",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111057544,
                "end": 1749114657544
              }
            },
            "results": [
              {
                "Has Bytes In": 220,
                "Has Bytes Out": 220
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.2",
            "name": "Common Message Pattern",
            "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111057514,
                "end": 1749114657514
              }
            },
            "results": [
              {
                "Has Messages In": 220,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Filter Validation": {
      "queries": [
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.1",
            "name": "Available Clusters",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111057532,
                "end": 1749114657532
              }
            },
            "results": [
              {
                "Total Samples": 110
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 110
        },
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.2",
            "name": "Available Topics",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111057518,
                "end": 1749114657518
              }
            },
            "results": [
              {
                "Total Samples": 330
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 330
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Metric Calculations": {
      "queries": [
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.1",
            "name": "Throughput Range",
            "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111059584,
                "end": 1749114659584
              }
            },
            "results": [
              {
                "facet": "pchawla-test",
                "Avg Throughput": 0,
                "Max Throughput": 0,
                "Min Throughput": 0,
                "provider.clusterName": "pchawla-test"
              },
              {
                "facet": "autodiscover-msk-cluster-auth-bob",
                "Avg Throughput": 16.231849985613376,
                "Max Throughput": 16.831352667435223,
                "Min Throughput": 15.48559201233014,
                "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.2",
            "name": "Percentage Calculations",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749111059550,
                "end": 1749114659550
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0,
                "Unhealthy %": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Summary Verification": {
      "queries": [
        {
          "category": "Summary Verification",
          "query": {
            "id": "16.1",
            "name": "Complete Data Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111059586,
                "end": 1749114659586
              }
            },
            "results": [
              {
                "Has Broker Data": 550,
                "Has Cluster Data": 110,
                "Has Topic Data": 330,
                "Newest Data": 1749114300000,
                "Oldest Data": 1749111060000
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 1,
        "success": 1,
        "hasData": 1,
        "failed": 0
      }
    },
    "Standard vs MSK Comparison": {
      "queries": [
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.1",
            "name": "Entity Count Comparison",
            "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample",
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749111059550,
                "end": 1749114659550
              }
            },
            "results": [
              {
                "MSK Brokers": 4,
                "Standard Brokers": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.2",
            "name": "Metric Coverage Comparison",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749111059542,
                "end": 1749114659542
              }
            },
            "results": [
              {
                "MSK Topic Events": 330,
                "Standard Topic Events": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    }
  },
  "details": [
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.1",
        "name": "Cluster Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111042121,
            "end": 1749114642121
          }
        },
        "results": [
          {
            "count": 110
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 110
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.2",
        "name": "All Cluster Metrics Present",
        "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111042119,
            "end": 1749114642119
          }
        },
        "results": [
          {
            "Has Active Controller Count": 110,
            "Has Global Partition Count": 110,
            "Has Offline Partitions Count": 110
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.3",
        "name": "Broker Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111042092,
            "end": 1749114642092
          }
        },
        "results": [
          {
            "count": 550
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 550
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.4",
        "name": "All Broker Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111042078,
            "end": 1749114642078
          }
        },
        "results": [
          {
            "Has Bytes In": 220,
            "Has Bytes Out": 220,
            "Has Messages In": 220,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.5",
        "name": "Topic Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111042081,
            "end": 1749114642081
          }
        },
        "results": [
          {
            "count": 330
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 330
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.6",
        "name": "Topic Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111043876,
            "end": 1749114643876
          }
        },
        "results": [
          {
            "Has Bytes In": 275,
            "Has Bytes Out": 110
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.7",
        "name": "Cluster Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111043833,
            "end": 1749114643833
          }
        },
        "results": [
          {
            "Has Cluster Name": 110,
            "Has Entity GUID": 0,
            "Has Entity Name": 110
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.8",
        "name": "Broker Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111043867,
            "end": 1749114643867
          }
        },
        "results": [
          {
            "Has Broker ID": 550,
            "Has Cluster Name": 550,
            "Has Entity GUID": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.9",
        "name": "Topic Attributes Present",
        "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111043832,
            "end": 1749114643832
          }
        },
        "results": [
          {
            "Has Display Name": 330,
            "Has Entity GUID": 0,
            "Has Topic Name": 330
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.1",
        "name": "Metric Events Exist",
        "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749111043843,
            "end": 1749114643843
          }
        },
        "results": [
          {
            "count": 2656755152
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2656755152
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.2",
        "name": "Cluster-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749111046005,
            "end": 1749114646005
          }
        },
        "results": [
          {
            "Active Controller": 0,
            "Global Partitions": 0,
            "Offline Partitions": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.3",
        "name": "Broker-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749111046034,
            "end": 1749114646034
          }
        },
        "results": [
          {
            "Broker Bytes In": 0,
            "Broker Bytes Out": 0,
            "Under Replicated": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.4",
        "name": "Topic-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749111045993,
            "end": 1749114645993
          }
        },
        "results": [
          {
            "Topic Bytes In": 0,
            "Topic Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.5",
        "name": "Metric Streams Attributes",
        "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749111046001,
            "end": 1749114646001
          }
        },
        "results": [
          {
            "Has Broker ID": 0,
            "Has Cluster Name": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.1",
        "name": "Broker Sample Data",
        "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111046042,
            "end": 1749114646042
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.2",
        "name": "Topic Sample Data",
        "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111047136,
            "end": 1749114647136
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.3",
        "name": "Offset Sample Data",
        "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaOffsetSample"
          ],
          "timeWindow": {
            "begin": 1749111047109,
            "end": 1749114647109
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.4",
        "name": "Producer Sample Data",
        "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaProducerSample"
          ],
          "timeWindow": {
            "begin": 1749111047160,
            "end": 1749114647160
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.5",
        "name": "Consumer Sample Data",
        "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaConsumerSample"
          ],
          "timeWindow": {
            "begin": 1749111047118,
            "end": 1749114647118
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.1",
        "name": "Check for Null Values",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111047148,
            "end": 1749114647148
          }
        },
        "results": [
          {
            "Null Active Controllers": 0,
            "Null Cluster Names": 0,
            "Null Offline Partitions": 0,
            "Total Records": 110
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.2",
        "name": "Data Freshness (Polling)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
        "critical": true
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749114347563,
            "end": 1749114647563
          }
        },
        "results": []
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.3",
        "name": "Data Freshness (Metric Streams)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749114347569,
            "end": 1749114647569
          }
        },
        "results": []
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.4",
        "name": "Tag Completeness",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111047531,
            "end": 1749114647531
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Has Cluster Label": 0,
            "Has Environment Label": 0,
            "Has Environment Tag": 0,
            "Has Integration Label": 0,
            "Total Records": 55,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Has Cluster Label": 0,
            "Has Environment Label": 0,
            "Has Environment Tag": 0,
            "Has Integration Label": 0,
            "Total Records": 55,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.5",
        "name": "Data Consistency Check",
        "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111047518,
            "end": 1749114647518
          }
        },
        "results": [
          {
            "Clusters in ClusterSample": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.1",
        "name": "Cluster Throughput Summary",
        "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111047523,
            "end": 1749114647523
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Total Bytes In/Sec": 1785.5034984174713,
            "Total Bytes Out/Sec": 365.2634008676979,
            "Total Messages In/Sec": 9.589418107696716,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Total Bytes In/Sec": 0,
            "Total Bytes Out/Sec": 0,
            "Total Messages In/Sec": 0,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.2",
        "name": "Throughput Aggregation",
        "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [],
          "timeWindow": {
            "begin": 1749111049482,
            "end": 1749114649482
          }
        },
        "results": [
          {
            "Total Incoming": 32.46369997122675,
            "Total Outgoing": 6.6411527430490525
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.3",
        "name": "Topic Throughput",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111049482,
            "end": 1749114649482
          }
        },
        "results": [
          {
            "facet": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
            "Bytes In/Sec": 15.48559201233014,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
            "latest": 15.48559201233014
          },
          {
            "facet": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
            "Bytes In/Sec": 13.091593448443236,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
            "latest": 13.091593448443236
          },
          {
            "facet": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
            "Bytes In/Sec": 2.4276543625907365,
            "Bytes Out/Sec": 6.641152743049054,
            "displayName": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
            "latest": 2.4276543625907365
          },
          {
            "facet": "3:pchawla-test:__consumer_offsets",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "3:pchawla-test:__consumer_offsets",
            "latest": 0
          },
          {
            "facet": "2:pchawla-test:__consumer_offsets",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "2:pchawla-test:__consumer_offsets",
            "latest": 0
          },
          {
            "facet": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
            "latest": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.4",
        "name": "Message Rates",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111049529,
            "end": 1749114649529
          }
        },
        "results": [
          {
            "Total Messages In": 9.589418107696716
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 9.589418107696716
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.1",
        "name": "Brokers per Cluster",
        "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111049528,
            "end": 1749114649528
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Broker Count": 2,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Broker Count": 2,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.2",
        "name": "Topics per Cluster",
        "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111049493,
            "end": 1749114649493
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Topic Count": 4,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Topic Count": 2,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.3",
        "name": "Entity GUIDs Present",
        "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111051683,
            "end": 1749114651683
          }
        },
        "results": [
          {
            "Total Entity GUIDs": 0,
            "Unique Entity GUIDs": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.1",
        "name": "Cluster Health Status",
        "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111051636,
            "end": 1749114651636
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.2",
        "name": "Broker Health Status",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111051649,
            "end": 1749114651649
          }
        },
        "results": [
          {
            "facet": [
              "autodiscover-msk-cluster-auth-bob",
              "1"
            ],
            "Bytes In Rate": 16.831352667435223,
            "Bytes Out Rate": 0,
            "Message Rate": 0.08565573876557363
          },
          {
            "facet": [
              "autodiscover-msk-cluster-auth-bob",
              "2"
            ],
            "Bytes In Rate": 15.730220805980986,
            "Bytes Out Rate": 6.641152743049054,
            "Message Rate": 0.08869731773800299
          },
          {
            "facet": [
              "pchawla-test",
              "2"
            ],
            "Bytes In Rate": 0,
            "Bytes Out Rate": 0,
            "Message Rate": 0
          },
          {
            "facet": [
              "pchawla-test",
              "3"
            ],
            "Bytes In Rate": 0,
            "Bytes Out Rate": 0,
            "Message Rate": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.3",
        "name": "Unhealthy Cluster Count",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111051638,
            "end": 1749114651638
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.1",
        "name": "Throughput Time Series",
        "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111051677,
            "end": 1749114651677
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749111051,
            "endTimeSeconds": 1749111351,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749111351,
            "endTimeSeconds": 1749111651,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749111651,
            "endTimeSeconds": 1749111951,
            "Incoming Throughput": 158.7705854017658,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749111951,
            "endTimeSeconds": 1749112251,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749112251,
            "endTimeSeconds": 1749112551,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749112551,
            "endTimeSeconds": 1749112851,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749112851,
            "endTimeSeconds": 1749113151,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749113151,
            "endTimeSeconds": 1749113451,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749113451,
            "endTimeSeconds": 1749113751,
            "Incoming Throughput": 162.80786736708106,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749113751,
            "endTimeSeconds": 1749114051,
            "Incoming Throughput": 162.80786736708103,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749114051,
            "endTimeSeconds": 1749114351,
            "Incoming Throughput": 161.46210671197596,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "beginTimeSeconds": 1749114351,
            "endTimeSeconds": 1749114651,
            "Incoming Throughput": 0,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749111051,
            "endTimeSeconds": 1749111351,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749111351,
            "endTimeSeconds": 1749111651,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749111651,
            "endTimeSeconds": 1749111951,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749111951,
            "endTimeSeconds": 1749112251,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749112251,
            "endTimeSeconds": 1749112551,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749112551,
            "endTimeSeconds": 1749112851,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749112851,
            "endTimeSeconds": 1749113151,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749113151,
            "endTimeSeconds": 1749113451,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749113451,
            "endTimeSeconds": 1749113751,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749113751,
            "endTimeSeconds": 1749114051,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749114051,
            "endTimeSeconds": 1749114351,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "pchawla-test",
            "beginTimeSeconds": 1749114351,
            "endTimeSeconds": 1749114651,
            "Incoming Throughput": 0,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 24
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.2",
        "name": "Message Rate Time Series",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111053638,
            "end": 1749114653638
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749111053,
            "endTimeSeconds": 1749111353,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749111353,
            "endTimeSeconds": 1749111653,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749111653,
            "endTimeSeconds": 1749111953,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749111953,
            "endTimeSeconds": 1749112253,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749112253,
            "endTimeSeconds": 1749112553,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749112553,
            "endTimeSeconds": 1749112853,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749112853,
            "endTimeSeconds": 1749113153,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749113153,
            "endTimeSeconds": 1749113453,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749113453,
            "endTimeSeconds": 1749113753,
            "Message Rate": 0.8717652825178832
          },
          {
            "beginTimeSeconds": 1749113753,
            "endTimeSeconds": 1749114053,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749114053,
            "endTimeSeconds": 1749114353,
            "Message Rate": 0.8717652825178831
          },
          {
            "beginTimeSeconds": 1749114353,
            "endTimeSeconds": 1749114653,
            "Message Rate": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.3",
        "name": "Partition Count Trend",
        "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111053618,
            "end": 1749114653618
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749111053,
            "endTimeSeconds": 1749111653,
            "Partitions": 26.25
          },
          {
            "beginTimeSeconds": 1749111653,
            "endTimeSeconds": 1749112253,
            "Partitions": 26.25
          },
          {
            "beginTimeSeconds": 1749112253,
            "endTimeSeconds": 1749112853,
            "Partitions": 26.25
          },
          {
            "beginTimeSeconds": 1749112853,
            "endTimeSeconds": 1749113453,
            "Partitions": 26.25
          },
          {
            "beginTimeSeconds": 1749113453,
            "endTimeSeconds": 1749114053,
            "Partitions": 26.25
          },
          {
            "beginTimeSeconds": 1749114053,
            "endTimeSeconds": 1749114653,
            "Partitions": 26.25
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.1",
        "name": "Account Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111053606,
            "end": 1749114653606
          }
        },
        "results": [
          {
            "Cluster Count": 0,
            "Named Cluster Count": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.2",
        "name": "Account Health Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111053639,
            "end": 1749114653639
          }
        },
        "results": [
          {
            "Total Clusters": 0,
            "Unhealthy Clusters": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.1",
        "name": "Data Volume Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111053618,
            "end": 1749114653618
          }
        },
        "results": [
          {
            "Broker Events": 550,
            "Cluster Events": 110,
            "Topic Events": 330
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.2",
        "name": "Large Dataset Check",
        "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111054934,
            "end": 1749114654934
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Topic Count": 4,
            "Total Events": 220,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Topic Count": 2,
            "Total Events": 110,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.1",
        "name": "Idle Topics",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111054885,
            "end": 1749114654885
          }
        },
        "results": [
          {
            "Avg Bytes In": 6.200967964672821,
            "Avg Bytes Out": 3.3205763715245267,
            "Total Topics": 330
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.2",
        "name": "Stale Data Detection",
        "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111054895,
            "end": 1749114654895
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Earliest Timestamp": 1749111060000,
            "Latest Timestamp": 1749114300000,
            "Total Samples": 55,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Earliest Timestamp": 1749111060000,
            "Latest Timestamp": 1749114300000,
            "Total Samples": 55,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.3",
        "name": "Partial Data Check",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111054890,
            "end": 1749114654890
          }
        },
        "results": [
          {
            "Missing Bytes In": 55,
            "Missing Bytes Out": 220,
            "Total Topics": 330
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.1",
        "name": "Top 10 Topics by Throughput",
        "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111054913,
            "end": 1749114654913
          }
        },
        "results": [
          {
            "facet": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
            "Avg Bytes In": 2.4276543625907365,
            "Sample Count": 55,
            "displayName": "2:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary"
          },
          {
            "facet": "3:pchawla-test:__consumer_offsets",
            "Avg Bytes In": 0,
            "Sample Count": 55,
            "displayName": "3:pchawla-test:__consumer_offsets"
          },
          {
            "facet": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
            "Avg Bytes In": 13.091593448443238,
            "Sample Count": 55,
            "displayName": "2:autodiscover-msk-cluster-auth-bob:__consumer_offsets"
          },
          {
            "facet": "2:pchawla-test:__consumer_offsets",
            "Avg Bytes In": 0,
            "Sample Count": 55,
            "displayName": "2:pchawla-test:__consumer_offsets"
          },
          {
            "facet": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary",
            "Avg Bytes In": null,
            "Sample Count": 55,
            "displayName": "1:autodiscover-msk-cluster-auth-bob:__amazon_msk_canary"
          },
          {
            "facet": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets",
            "Avg Bytes In": 15.485592012330141,
            "Sample Count": 55,
            "displayName": "1:autodiscover-msk-cluster-auth-bob:__consumer_offsets"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.2",
        "name": "Top 5 Clusters by Size",
        "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111057575,
            "end": 1749114657575
          }
        },
        "results": [
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Broker Count": 2,
            "Topic Count": 6,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          },
          {
            "facet": "pchawla-test",
            "Broker Count": 2,
            "Topic Count": 4,
            "provider.clusterName": "pchawla-test"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.1",
        "name": "Common Throughput Pattern",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111057544,
            "end": 1749114657544
          }
        },
        "results": [
          {
            "Has Bytes In": 220,
            "Has Bytes Out": 220
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.2",
        "name": "Common Message Pattern",
        "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111057514,
            "end": 1749114657514
          }
        },
        "results": [
          {
            "Has Messages In": 220,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.1",
        "name": "Available Clusters",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111057532,
            "end": 1749114657532
          }
        },
        "results": [
          {
            "Total Samples": 110
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 110
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.2",
        "name": "Available Topics",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111057518,
            "end": 1749114657518
          }
        },
        "results": [
          {
            "Total Samples": 330
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 330
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.1",
        "name": "Throughput Range",
        "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111059584,
            "end": 1749114659584
          }
        },
        "results": [
          {
            "facet": "pchawla-test",
            "Avg Throughput": 0,
            "Max Throughput": 0,
            "Min Throughput": 0,
            "provider.clusterName": "pchawla-test"
          },
          {
            "facet": "autodiscover-msk-cluster-auth-bob",
            "Avg Throughput": 16.231849985613376,
            "Max Throughput": 16.831352667435223,
            "Min Throughput": 15.48559201233014,
            "provider.clusterName": "autodiscover-msk-cluster-auth-bob"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.2",
        "name": "Percentage Calculations",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749111059550,
            "end": 1749114659550
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0,
            "Unhealthy %": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Summary Verification",
      "query": {
        "id": "16.1",
        "name": "Complete Data Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111059586,
            "end": 1749114659586
          }
        },
        "results": [
          {
            "Has Broker Data": 550,
            "Has Cluster Data": 110,
            "Has Topic Data": 330,
            "Newest Data": 1749114300000,
            "Oldest Data": 1749111060000
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.1",
        "name": "Entity Count Comparison",
        "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample",
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749111059550,
            "end": 1749114659550
          }
        },
        "results": [
          {
            "MSK Brokers": 4,
            "Standard Brokers": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.2",
        "name": "Metric Coverage Comparison",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749111059542,
            "end": 1749114659542
          }
        },
        "results": [
          {
            "MSK Topic Events": 330,
            "Standard Topic Events": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    }
  ]
}