{
  "timestamp": "2025-06-05T13:36:22.409Z",
  "config": {
    "accountId": "3630072",
    "timeRange": "1 hour ago",
    "clusterName": null
  },
  "summary": {
    "totalQueries": 55,
    "successful": 55,
    "withData": 53,
    "failed": 0
  },
  "scores": {
    "dataAvailability": 100,
    "metricCompleteness": 96.36363636363636,
    "dataFreshness": 100,
    "entityRelationships": 100,
    "overall": 98.9090909090909
  },
  "recommendations": [],
  "categories": {
    "MSK Polling Data": {
      "queries": [
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.1",
            "name": "Cluster Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126974309,
                "end": 1749130574309
              }
            },
            "results": [
              {
                "count": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 62
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.2",
            "name": "All Cluster Metrics Present",
            "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126974334,
                "end": 1749130574334
              }
            },
            "results": [
              {
                "Has Active Controller Count": 62,
                "Has Global Partition Count": 0,
                "Has Offline Partitions Count": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.3",
            "name": "Broker Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126974370,
                "end": 1749130574370
              }
            },
            "results": [
              {
                "count": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 62
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.4",
            "name": "All Broker Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126974494,
                "end": 1749130574494
              }
            },
            "results": [
              {
                "Has Bytes In": 62,
                "Has Bytes Out": 62,
                "Has Messages In": 62,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.5",
            "name": "Topic Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126974458,
                "end": 1749130574458
              }
            },
            "results": [
              {
                "count": 496
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 496
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.6",
            "name": "Topic Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126974889,
                "end": 1749130574889
              }
            },
            "results": [
              {
                "Has Bytes In": 0,
                "Has Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.7",
            "name": "Cluster Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126974876,
                "end": 1749130574876
              }
            },
            "results": [
              {
                "Has Cluster Name": 62,
                "Has Entity GUID": 62,
                "Has Entity Name": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.8",
            "name": "Broker Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126974853,
                "end": 1749130574853
              }
            },
            "results": [
              {
                "Has Broker ID": 62,
                "Has Cluster Name": 62,
                "Has Entity GUID": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.9",
            "name": "Topic Attributes Present",
            "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126974879,
                "end": 1749130574879
              }
            },
            "results": [
              {
                "Has Display Name": 496,
                "Has Entity GUID": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 9,
        "success": 9,
        "hasData": 9,
        "failed": 0
      }
    },
    "Metric Streams Data": {
      "queries": [
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.1",
            "name": "Metric Events Exist",
            "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749126974883,
                "end": 1749130574883
              }
            },
            "results": [
              {
                "count": 1886
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1886
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.2",
            "name": "Cluster-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749126975381,
                "end": 1749130575381
              }
            },
            "results": [
              {
                "Active Controller": 0,
                "Global Partitions": 0,
                "Offline Partitions": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.3",
            "name": "Broker-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749126975396,
                "end": 1749130575396
              }
            },
            "results": [
              {
                "Broker Bytes In": 0,
                "Broker Bytes Out": 0,
                "Under Replicated": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.4",
            "name": "Topic-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749126975397,
                "end": 1749130575397
              }
            },
            "results": [
              {
                "Topic Bytes In": 0,
                "Topic Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.5",
            "name": "Metric Streams Attributes",
            "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749126975392,
                "end": 1749130575392
              }
            },
            "results": [
              {
                "Has Broker ID": 0,
                "Has Cluster Name": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Standard Kafka Integration": {
      "queries": [
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.1",
            "name": "Broker Sample Data",
            "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126975363,
                "end": 1749130575363
              }
            },
            "results": [
              {
                "count": 372
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 372
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.2",
            "name": "Topic Sample Data",
            "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126976429,
                "end": 1749130576429
              }
            },
            "results": [
              {
                "count": 496
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 496
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.3",
            "name": "Offset Sample Data",
            "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaOffsetSample"
              ],
              "timeWindow": {
                "begin": 1749126976445,
                "end": 1749130576445
              }
            },
            "results": [
              {
                "count": 930
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 930
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.4",
            "name": "Producer Sample Data",
            "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaProducerSample"
              ],
              "timeWindow": {
                "begin": 1749126976429,
                "end": 1749130576429
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.5",
            "name": "Consumer Sample Data",
            "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaConsumerSample"
              ],
              "timeWindow": {
                "begin": 1749126976437,
                "end": 1749130576437
              }
            },
            "results": [
              {
                "count": 0
              }
            ]
          },
          "success": true,
          "hasData": false,
          "resultCount": 0
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 3,
        "failed": 0
      }
    },
    "Data Quality": {
      "queries": [
        {
          "category": "Data Quality",
          "query": {
            "id": "4.1",
            "name": "Check for Null Values",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126976411,
                "end": 1749130576411
              }
            },
            "results": [
              {
                "Null Active Controllers": 0,
                "Null Cluster Names": 0,
                "Null Offline Partitions": 0,
                "Total Records": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.2",
            "name": "Data Freshness (Polling)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
            "critical": true
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749130276819,
                "end": 1749130576819
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Age in Seconds": 120,
                "Last Data Point": 1749130547000,
                "Recent Samples": 3,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.3",
            "name": "Data Freshness (Metric Streams)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749130276832,
                "end": 1749130576832
              }
            },
            "results": [
              {
                "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
                "Age in Seconds": 180,
                "Last Data Point": 1749130500000,
                "Recent Samples": 12,
                "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
              },
              {
                "facet": "minikube-kafka-broker-1",
                "Age in Seconds": 180,
                "Last Data Point": 1749130500000,
                "Recent Samples": 2,
                "entity.name": "minikube-kafka-broker-1"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.4",
            "name": "Tag Completeness",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126976805,
                "end": 1749130576805
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Has Cluster Label": 0,
                "Has Environment Label": 0,
                "Has Environment Tag": 62,
                "Has Integration Label": 0,
                "Total Records": 62,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.5",
            "name": "Data Consistency Check",
            "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126976812,
                "end": 1749130576812
              }
            },
            "results": [
              {
                "Clusters in ClusterSample": 1
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Throughput Calculations": {
      "queries": [
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.1",
            "name": "Cluster Throughput Summary",
            "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126976828,
                "end": 1749130576828
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Total Bytes In/Sec": 55449.64093437154,
                "Total Bytes Out/Sec": 56151.049462365605,
                "Total Messages In/Sec": 712.1841305153871,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.2",
            "name": "Throughput Aggregation",
            "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [],
              "timeWindow": {
                "begin": 1749126978554,
                "end": 1749130578554
              }
            },
            "results": [
              {
                "Total Incoming": 894.3490473285733,
                "Total Outgoing": 905.6620881026711
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.3",
            "name": "Topic Throughput",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126978558,
                "end": 1749130578558
              }
            },
            "results": [
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.4",
            "name": "Message Rates",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126978556,
                "end": 1749130578556
              }
            },
            "results": [
              {
                "Total Messages In": 712.1841305153871
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 712.1841305153871
        }
      ],
      "summary": {
        "total": 4,
        "success": 4,
        "hasData": 4,
        "failed": 0
      }
    },
    "Entity Relationships": {
      "queries": [
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.1",
            "name": "Brokers per Cluster",
            "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126978560,
                "end": 1749130578560
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.2",
            "name": "Topics per Cluster",
            "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126978525,
                "end": 1749130578525
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.3",
            "name": "Entity GUIDs Present",
            "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126979085,
                "end": 1749130579085
              }
            },
            "results": [
              {
                "Total Entity GUIDs": 62,
                "Unique Entity GUIDs": 62
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Health Metrics": {
      "queries": [
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.1",
            "name": "Cluster Health Status",
            "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126979070,
                "end": 1749130579070
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.2",
            "name": "Broker Health Status",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126979095,
                "end": 1749130579095
              }
            },
            "results": [
              {
                "facet": [
                  "minikube-kafka",
                  "1"
                ],
                "Bytes In Rate": 1462.7666666666667,
                "Bytes Out Rate": 1583.2666666666667,
                "Message Rate": 16.3
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.3",
            "name": "Unhealthy Cluster Count",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126979067,
                "end": 1749130579067
              }
            },
            "results": [
              {
                "Total": 1,
                "Unhealthy": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Time Series Data": {
      "queries": [
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.1",
            "name": "Throughput Time Series",
            "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126979076,
                "end": 1749130579076
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749126979,
                "endTimeSeconds": 1749127279,
                "Incoming Throughput": 3123.133333333333,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749127279,
                "endTimeSeconds": 1749127579,
                "Incoming Throughput": 8343.27319243604,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749127579,
                "endTimeSeconds": 1749127879,
                "Incoming Throughput": 9794.151242120875,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749127879,
                "endTimeSeconds": 1749128179,
                "Incoming Throughput": 9331.183166481274,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749128179,
                "endTimeSeconds": 1749128479,
                "Incoming Throughput": 10049.166666666668,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749128479,
                "endTimeSeconds": 1749128779,
                "Incoming Throughput": 9729.300000000001,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749128779,
                "endTimeSeconds": 1749129079,
                "Incoming Throughput": 1417.9666666666667,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749129079,
                "endTimeSeconds": 1749129379,
                "Incoming Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749129379,
                "endTimeSeconds": 1749129679,
                "Incoming Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749129679,
                "endTimeSeconds": 1749129979,
                "Incoming Throughput": 1187.7666666666667,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749129979,
                "endTimeSeconds": 1749130279,
                "Incoming Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749130279,
                "endTimeSeconds": 1749130579,
                "Incoming Throughput": 2473.7,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.2",
            "name": "Message Rate Time Series",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126980172,
                "end": 1749130580172
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749126980,
                "endTimeSeconds": 1749127280,
                "Message Rate": 41.36666666666667
              },
              {
                "beginTimeSeconds": 1749127280,
                "endTimeSeconds": 1749127580,
                "Message Rate": 106.60745272525027
              },
              {
                "beginTimeSeconds": 1749127580,
                "endTimeSeconds": 1749127880,
                "Message Rate": 127.3685947348906
              },
              {
                "beginTimeSeconds": 1749127880,
                "endTimeSeconds": 1749128180,
                "Message Rate": 117.17474972191324
              },
              {
                "beginTimeSeconds": 1749128180,
                "endTimeSeconds": 1749128480,
                "Message Rate": 129
              },
              {
                "beginTimeSeconds": 1749128480,
                "endTimeSeconds": 1749128780,
                "Message Rate": 127.06666666666666
              },
              {
                "beginTimeSeconds": 1749128780,
                "endTimeSeconds": 1749129080,
                "Message Rate": 19.033333333333335
              },
              {
                "beginTimeSeconds": 1749129080,
                "endTimeSeconds": 1749129380,
                "Message Rate": 0
              },
              {
                "beginTimeSeconds": 1749129380,
                "endTimeSeconds": 1749129680,
                "Message Rate": 0
              },
              {
                "beginTimeSeconds": 1749129680,
                "endTimeSeconds": 1749129980,
                "Message Rate": 14.6
              },
              {
                "beginTimeSeconds": 1749129980,
                "endTimeSeconds": 1749130280,
                "Message Rate": 0
              },
              {
                "beginTimeSeconds": 1749130280,
                "endTimeSeconds": 1749130580,
                "Message Rate": 42.400000000000006
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.3",
            "name": "Partition Count Trend",
            "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126980179,
                "end": 1749130580179
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749126980,
                "endTimeSeconds": 1749127580,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749127580,
                "endTimeSeconds": 1749128180,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749128180,
                "endTimeSeconds": 1749128780,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749128780,
                "endTimeSeconds": 1749129380,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749129380,
                "endTimeSeconds": 1749129980,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749129980,
                "endTimeSeconds": 1749130580,
                "Partitions": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Account Aggregation": {
      "queries": [
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.1",
            "name": "Account Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126980178,
                "end": 1749130580178
              }
            },
            "results": [
              {
                "Cluster Count": 1,
                "Named Cluster Count": 1
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.2",
            "name": "Account Health Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126980168,
                "end": 1749130580168
              }
            },
            "results": [
              {
                "Total Clusters": 1,
                "Unhealthy Clusters": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Performance Metrics": {
      "queries": [
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.1",
            "name": "Data Volume Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126980150,
                "end": 1749130580150
              }
            },
            "results": [
              {
                "Broker Events": 63,
                "Cluster Events": 63,
                "Topic Events": 504
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.2",
            "name": "Large Dataset Check",
            "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126980557,
                "end": 1749130580557
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "Total Events": 504,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Edge Cases": {
      "queries": [
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.1",
            "name": "Idle Topics",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126980551,
                "end": 1749130580551
              }
            },
            "results": [
              {
                "Avg Bytes In": null,
                "Avg Bytes Out": null,
                "Total Topics": 504
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.2",
            "name": "Stale Data Detection",
            "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126980552,
                "end": 1749130580552
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Earliest Timestamp": 1749127174000,
                "Latest Timestamp": 1749130577000,
                "Total Samples": 63,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.3",
            "name": "Partial Data Check",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126980578,
                "end": 1749130580578
              }
            },
            "results": [
              {
                "Missing Bytes In": 504,
                "Missing Bytes Out": 504,
                "Total Topics": 504
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Top N Analysis": {
      "queries": [
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.1",
            "name": "Top 10 Topics by Throughput",
            "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126980534,
                "end": 1749130580534
              }
            },
            "results": [
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
                "Avg Bytes In": null,
                "Sample Count": 126,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
                "Avg Bytes In": null,
                "Sample Count": 126,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
                "Avg Bytes In": null,
                "Sample Count": 126,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
              },
              {
                "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
                "Avg Bytes In": null,
                "Sample Count": 126,
                "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.2",
            "name": "Top 5 Clusters by Size",
            "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126981031,
                "end": 1749130581031
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "Topic Count": 5,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Confluent Cloud Compatibility": {
      "queries": [
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.1",
            "name": "Common Throughput Pattern",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126981018,
                "end": 1749130581018
              }
            },
            "results": [
              {
                "Has Bytes In": 63,
                "Has Bytes Out": 63
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.2",
            "name": "Common Message Pattern",
            "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126981031,
                "end": 1749130581031
              }
            },
            "results": [
              {
                "Has Messages In": 63,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Filter Validation": {
      "queries": [
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.1",
            "name": "Available Clusters",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126981038,
                "end": 1749130581038
              }
            },
            "results": [
              {
                "Total Samples": 63
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 63
        },
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.2",
            "name": "Available Topics",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126981036,
                "end": 1749130581036
              }
            },
            "results": [
              {
                "Total Samples": 504
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 504
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Metric Calculations": {
      "queries": [
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.1",
            "name": "Throughput Range",
            "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126981524,
                "end": 1749130581524
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Avg Throughput": 893.1874222387017,
                "Max Throughput": 1520.448275862069,
                "Min Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.2",
            "name": "Percentage Calculations",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749126981520,
                "end": 1749130581520
              }
            },
            "results": [
              {
                "Total": 1,
                "Unhealthy": 0,
                "Unhealthy %": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Summary Verification": {
      "queries": [
        {
          "category": "Summary Verification",
          "query": {
            "id": "16.1",
            "name": "Complete Data Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126981522,
                "end": 1749130581522
              }
            },
            "results": [
              {
                "Has Broker Data": 63,
                "Has Cluster Data": 63,
                "Has Topic Data": 504,
                "Newest Data": 1749130577000,
                "Oldest Data": 1749127174000
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 1,
        "success": 1,
        "hasData": 1,
        "failed": 0
      }
    },
    "Standard vs MSK Comparison": {
      "queries": [
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.1",
            "name": "Entity Count Comparison",
            "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample",
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749126981520,
                "end": 1749130581520
              }
            },
            "results": [
              {
                "MSK Brokers": 1,
                "Standard Brokers": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.2",
            "name": "Metric Coverage Comparison",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749126981520,
                "end": 1749130581520
              }
            },
            "results": [
              {
                "MSK Topic Events": 504,
                "Standard Topic Events": 504
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    }
  },
  "details": [
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.1",
        "name": "Cluster Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126974309,
            "end": 1749130574309
          }
        },
        "results": [
          {
            "count": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 62
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.2",
        "name": "All Cluster Metrics Present",
        "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126974334,
            "end": 1749130574334
          }
        },
        "results": [
          {
            "Has Active Controller Count": 62,
            "Has Global Partition Count": 0,
            "Has Offline Partitions Count": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.3",
        "name": "Broker Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126974370,
            "end": 1749130574370
          }
        },
        "results": [
          {
            "count": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 62
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.4",
        "name": "All Broker Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126974494,
            "end": 1749130574494
          }
        },
        "results": [
          {
            "Has Bytes In": 62,
            "Has Bytes Out": 62,
            "Has Messages In": 62,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.5",
        "name": "Topic Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126974458,
            "end": 1749130574458
          }
        },
        "results": [
          {
            "count": 496
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 496
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.6",
        "name": "Topic Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126974889,
            "end": 1749130574889
          }
        },
        "results": [
          {
            "Has Bytes In": 0,
            "Has Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.7",
        "name": "Cluster Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126974876,
            "end": 1749130574876
          }
        },
        "results": [
          {
            "Has Cluster Name": 62,
            "Has Entity GUID": 62,
            "Has Entity Name": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.8",
        "name": "Broker Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126974853,
            "end": 1749130574853
          }
        },
        "results": [
          {
            "Has Broker ID": 62,
            "Has Cluster Name": 62,
            "Has Entity GUID": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.9",
        "name": "Topic Attributes Present",
        "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126974879,
            "end": 1749130574879
          }
        },
        "results": [
          {
            "Has Display Name": 496,
            "Has Entity GUID": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.1",
        "name": "Metric Events Exist",
        "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749126974883,
            "end": 1749130574883
          }
        },
        "results": [
          {
            "count": 1886
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1886
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.2",
        "name": "Cluster-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749126975381,
            "end": 1749130575381
          }
        },
        "results": [
          {
            "Active Controller": 0,
            "Global Partitions": 0,
            "Offline Partitions": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.3",
        "name": "Broker-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749126975396,
            "end": 1749130575396
          }
        },
        "results": [
          {
            "Broker Bytes In": 0,
            "Broker Bytes Out": 0,
            "Under Replicated": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.4",
        "name": "Topic-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749126975397,
            "end": 1749130575397
          }
        },
        "results": [
          {
            "Topic Bytes In": 0,
            "Topic Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.5",
        "name": "Metric Streams Attributes",
        "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749126975392,
            "end": 1749130575392
          }
        },
        "results": [
          {
            "Has Broker ID": 0,
            "Has Cluster Name": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.1",
        "name": "Broker Sample Data",
        "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126975363,
            "end": 1749130575363
          }
        },
        "results": [
          {
            "count": 372
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 372
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.2",
        "name": "Topic Sample Data",
        "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126976429,
            "end": 1749130576429
          }
        },
        "results": [
          {
            "count": 496
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 496
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.3",
        "name": "Offset Sample Data",
        "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaOffsetSample"
          ],
          "timeWindow": {
            "begin": 1749126976445,
            "end": 1749130576445
          }
        },
        "results": [
          {
            "count": 930
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 930
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.4",
        "name": "Producer Sample Data",
        "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaProducerSample"
          ],
          "timeWindow": {
            "begin": 1749126976429,
            "end": 1749130576429
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.5",
        "name": "Consumer Sample Data",
        "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaConsumerSample"
          ],
          "timeWindow": {
            "begin": 1749126976437,
            "end": 1749130576437
          }
        },
        "results": [
          {
            "count": 0
          }
        ]
      },
      "success": true,
      "hasData": false,
      "resultCount": 0
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.1",
        "name": "Check for Null Values",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126976411,
            "end": 1749130576411
          }
        },
        "results": [
          {
            "Null Active Controllers": 0,
            "Null Cluster Names": 0,
            "Null Offline Partitions": 0,
            "Total Records": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.2",
        "name": "Data Freshness (Polling)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
        "critical": true
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749130276819,
            "end": 1749130576819
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Age in Seconds": 120,
            "Last Data Point": 1749130547000,
            "Recent Samples": 3,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.3",
        "name": "Data Freshness (Metric Streams)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749130276832,
            "end": 1749130576832
          }
        },
        "results": [
          {
            "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
            "Age in Seconds": 180,
            "Last Data Point": 1749130500000,
            "Recent Samples": 12,
            "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
          },
          {
            "facet": "minikube-kafka-broker-1",
            "Age in Seconds": 180,
            "Last Data Point": 1749130500000,
            "Recent Samples": 2,
            "entity.name": "minikube-kafka-broker-1"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.4",
        "name": "Tag Completeness",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126976805,
            "end": 1749130576805
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Has Cluster Label": 0,
            "Has Environment Label": 0,
            "Has Environment Tag": 62,
            "Has Integration Label": 0,
            "Total Records": 62,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.5",
        "name": "Data Consistency Check",
        "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126976812,
            "end": 1749130576812
          }
        },
        "results": [
          {
            "Clusters in ClusterSample": 1
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.1",
        "name": "Cluster Throughput Summary",
        "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126976828,
            "end": 1749130576828
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Total Bytes In/Sec": 55449.64093437154,
            "Total Bytes Out/Sec": 56151.049462365605,
            "Total Messages In/Sec": 712.1841305153871,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.2",
        "name": "Throughput Aggregation",
        "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [],
          "timeWindow": {
            "begin": 1749126978554,
            "end": 1749130578554
          }
        },
        "results": [
          {
            "Total Incoming": 894.3490473285733,
            "Total Outgoing": 905.6620881026711
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.3",
        "name": "Topic Throughput",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126978558,
            "end": 1749130578558
          }
        },
        "results": [
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.4",
        "name": "Message Rates",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126978556,
            "end": 1749130578556
          }
        },
        "results": [
          {
            "Total Messages In": 712.1841305153871
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 712.1841305153871
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.1",
        "name": "Brokers per Cluster",
        "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126978560,
            "end": 1749130578560
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.2",
        "name": "Topics per Cluster",
        "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126978525,
            "end": 1749130578525
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.3",
        "name": "Entity GUIDs Present",
        "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126979085,
            "end": 1749130579085
          }
        },
        "results": [
          {
            "Total Entity GUIDs": 62,
            "Unique Entity GUIDs": 62
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.1",
        "name": "Cluster Health Status",
        "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126979070,
            "end": 1749130579070
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.2",
        "name": "Broker Health Status",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126979095,
            "end": 1749130579095
          }
        },
        "results": [
          {
            "facet": [
              "minikube-kafka",
              "1"
            ],
            "Bytes In Rate": 1462.7666666666667,
            "Bytes Out Rate": 1583.2666666666667,
            "Message Rate": 16.3
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.3",
        "name": "Unhealthy Cluster Count",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126979067,
            "end": 1749130579067
          }
        },
        "results": [
          {
            "Total": 1,
            "Unhealthy": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.1",
        "name": "Throughput Time Series",
        "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126979076,
            "end": 1749130579076
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749126979,
            "endTimeSeconds": 1749127279,
            "Incoming Throughput": 3123.133333333333,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749127279,
            "endTimeSeconds": 1749127579,
            "Incoming Throughput": 8343.27319243604,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749127579,
            "endTimeSeconds": 1749127879,
            "Incoming Throughput": 9794.151242120875,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749127879,
            "endTimeSeconds": 1749128179,
            "Incoming Throughput": 9331.183166481274,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749128179,
            "endTimeSeconds": 1749128479,
            "Incoming Throughput": 10049.166666666668,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749128479,
            "endTimeSeconds": 1749128779,
            "Incoming Throughput": 9729.300000000001,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749128779,
            "endTimeSeconds": 1749129079,
            "Incoming Throughput": 1417.9666666666667,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749129079,
            "endTimeSeconds": 1749129379,
            "Incoming Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749129379,
            "endTimeSeconds": 1749129679,
            "Incoming Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749129679,
            "endTimeSeconds": 1749129979,
            "Incoming Throughput": 1187.7666666666667,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749129979,
            "endTimeSeconds": 1749130279,
            "Incoming Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749130279,
            "endTimeSeconds": 1749130579,
            "Incoming Throughput": 2473.7,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.2",
        "name": "Message Rate Time Series",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126980172,
            "end": 1749130580172
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749126980,
            "endTimeSeconds": 1749127280,
            "Message Rate": 41.36666666666667
          },
          {
            "beginTimeSeconds": 1749127280,
            "endTimeSeconds": 1749127580,
            "Message Rate": 106.60745272525027
          },
          {
            "beginTimeSeconds": 1749127580,
            "endTimeSeconds": 1749127880,
            "Message Rate": 127.3685947348906
          },
          {
            "beginTimeSeconds": 1749127880,
            "endTimeSeconds": 1749128180,
            "Message Rate": 117.17474972191324
          },
          {
            "beginTimeSeconds": 1749128180,
            "endTimeSeconds": 1749128480,
            "Message Rate": 129
          },
          {
            "beginTimeSeconds": 1749128480,
            "endTimeSeconds": 1749128780,
            "Message Rate": 127.06666666666666
          },
          {
            "beginTimeSeconds": 1749128780,
            "endTimeSeconds": 1749129080,
            "Message Rate": 19.033333333333335
          },
          {
            "beginTimeSeconds": 1749129080,
            "endTimeSeconds": 1749129380,
            "Message Rate": 0
          },
          {
            "beginTimeSeconds": 1749129380,
            "endTimeSeconds": 1749129680,
            "Message Rate": 0
          },
          {
            "beginTimeSeconds": 1749129680,
            "endTimeSeconds": 1749129980,
            "Message Rate": 14.6
          },
          {
            "beginTimeSeconds": 1749129980,
            "endTimeSeconds": 1749130280,
            "Message Rate": 0
          },
          {
            "beginTimeSeconds": 1749130280,
            "endTimeSeconds": 1749130580,
            "Message Rate": 42.400000000000006
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.3",
        "name": "Partition Count Trend",
        "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126980179,
            "end": 1749130580179
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749126980,
            "endTimeSeconds": 1749127580,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749127580,
            "endTimeSeconds": 1749128180,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749128180,
            "endTimeSeconds": 1749128780,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749128780,
            "endTimeSeconds": 1749129380,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749129380,
            "endTimeSeconds": 1749129980,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749129980,
            "endTimeSeconds": 1749130580,
            "Partitions": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.1",
        "name": "Account Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126980178,
            "end": 1749130580178
          }
        },
        "results": [
          {
            "Cluster Count": 1,
            "Named Cluster Count": 1
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.2",
        "name": "Account Health Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126980168,
            "end": 1749130580168
          }
        },
        "results": [
          {
            "Total Clusters": 1,
            "Unhealthy Clusters": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.1",
        "name": "Data Volume Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126980150,
            "end": 1749130580150
          }
        },
        "results": [
          {
            "Broker Events": 63,
            "Cluster Events": 63,
            "Topic Events": 504
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.2",
        "name": "Large Dataset Check",
        "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126980557,
            "end": 1749130580557
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "Total Events": 504,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.1",
        "name": "Idle Topics",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126980551,
            "end": 1749130580551
          }
        },
        "results": [
          {
            "Avg Bytes In": null,
            "Avg Bytes Out": null,
            "Total Topics": 504
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.2",
        "name": "Stale Data Detection",
        "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126980552,
            "end": 1749130580552
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Earliest Timestamp": 1749127174000,
            "Latest Timestamp": 1749130577000,
            "Total Samples": 63,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.3",
        "name": "Partial Data Check",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126980578,
            "end": 1749130580578
          }
        },
        "results": [
          {
            "Missing Bytes In": 504,
            "Missing Bytes Out": 504,
            "Total Topics": 504
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.1",
        "name": "Top 10 Topics by Throughput",
        "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126980534,
            "end": 1749130580534
          }
        },
        "results": [
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets",
            "Avg Bytes In": null,
            "Sample Count": 126,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-__consumer_offsets"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-events",
            "Avg Bytes In": null,
            "Sample Count": 126,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-events"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-metrics",
            "Avg Bytes In": null,
            "Sample Count": 126,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-metrics"
          },
          {
            "facet": "KAFKA_TOPIC:minikube-kafka-topic-logs",
            "Avg Bytes In": null,
            "Sample Count": 126,
            "displayName": "KAFKA_TOPIC:minikube-kafka-topic-logs"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.2",
        "name": "Top 5 Clusters by Size",
        "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126981031,
            "end": 1749130581031
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "Topic Count": 5,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.1",
        "name": "Common Throughput Pattern",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126981018,
            "end": 1749130581018
          }
        },
        "results": [
          {
            "Has Bytes In": 63,
            "Has Bytes Out": 63
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.2",
        "name": "Common Message Pattern",
        "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126981031,
            "end": 1749130581031
          }
        },
        "results": [
          {
            "Has Messages In": 63,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.1",
        "name": "Available Clusters",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126981038,
            "end": 1749130581038
          }
        },
        "results": [
          {
            "Total Samples": 63
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 63
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.2",
        "name": "Available Topics",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126981036,
            "end": 1749130581036
          }
        },
        "results": [
          {
            "Total Samples": 504
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 504
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.1",
        "name": "Throughput Range",
        "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126981524,
            "end": 1749130581524
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Avg Throughput": 893.1874222387017,
            "Max Throughput": 1520.448275862069,
            "Min Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.2",
        "name": "Percentage Calculations",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749126981520,
            "end": 1749130581520
          }
        },
        "results": [
          {
            "Total": 1,
            "Unhealthy": 0,
            "Unhealthy %": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Summary Verification",
      "query": {
        "id": "16.1",
        "name": "Complete Data Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126981522,
            "end": 1749130581522
          }
        },
        "results": [
          {
            "Has Broker Data": 63,
            "Has Cluster Data": 63,
            "Has Topic Data": 504,
            "Newest Data": 1749130577000,
            "Oldest Data": 1749127174000
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.1",
        "name": "Entity Count Comparison",
        "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample",
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749126981520,
            "end": 1749130581520
          }
        },
        "results": [
          {
            "MSK Brokers": 1,
            "Standard Brokers": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.2",
        "name": "Metric Coverage Comparison",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749126981520,
            "end": 1749130581520
          }
        },
        "results": [
          {
            "MSK Topic Events": 504,
            "Standard Topic Events": 504
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    }
  ]
}