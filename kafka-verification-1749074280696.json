{
  "timestamp": "2025-06-04T21:58:00.692Z",
  "config": {
    "accountId": "3630072",
    "timeRange": "1 hour ago",
    "clusterName": null
  },
  "summary": {
    "totalQueries": 55,
    "successful": 55,
    "withData": 55,
    "failed": 0
  },
  "scores": {
    "dataAvailability": 100,
    "metricCompleteness": 100,
    "dataFreshness": 100,
    "entityRelationships": 100,
    "overall": 100
  },
  "recommendations": [],
  "categories": {
    "MSK Polling Data": {
      "queries": [
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.1",
            "name": "Cluster Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070675743,
                "end": 1749074275743
              }
            },
            "results": [
              {
                "count": 411
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 411
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.2",
            "name": "All Cluster Metrics Present",
            "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070675736,
                "end": 1749074275736
              }
            },
            "results": [
              {
                "Has Active Controller Count": 411,
                "Has Global Partition Count": 0,
                "Has Offline Partitions Count": 290
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.3",
            "name": "Broker Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070675705,
                "end": 1749074275705
              }
            },
            "results": [
              {
                "count": 325
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 325
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.4",
            "name": "All Broker Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070675738,
                "end": 1749074275738
              }
            },
            "results": [
              {
                "Has Bytes In": 204,
                "Has Bytes Out": 204,
                "Has Messages In": 204,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.5",
            "name": "Topic Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070675725,
                "end": 1749074275725
              }
            },
            "results": [
              {
                "count": 1625
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1625
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.6",
            "name": "Topic Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070676162,
                "end": 1749074276162
              }
            },
            "results": [
              {
                "Has Bytes In": 0,
                "Has Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.7",
            "name": "Cluster Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070676158,
                "end": 1749074276158
              }
            },
            "results": [
              {
                "Has Cluster Name": 411,
                "Has Entity GUID": 0,
                "Has Entity Name": 411
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.8",
            "name": "Broker Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070676174,
                "end": 1749074276174
              }
            },
            "results": [
              {
                "Has Broker ID": 325,
                "Has Cluster Name": 325,
                "Has Entity GUID": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.9",
            "name": "Topic Attributes Present",
            "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070676124,
                "end": 1749074276124
              }
            },
            "results": [
              {
                "Has Display Name": 1625,
                "Has Entity GUID": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 9,
        "success": 9,
        "hasData": 9,
        "failed": 0
      }
    },
    "Metric Streams Data": {
      "queries": [
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.1",
            "name": "Metric Events Exist",
            "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070676140,
                "end": 1749074276140
              }
            },
            "results": [
              {
                "count": 7327
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 7327
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.2",
            "name": "Cluster-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070676597,
                "end": 1749074276597
              }
            },
            "results": [
              {
                "Active Controller": 0,
                "Global Partitions": 0,
                "Offline Partitions": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.3",
            "name": "Broker-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070676591,
                "end": 1749074276591
              }
            },
            "results": [
              {
                "Broker Bytes In": 0,
                "Broker Bytes Out": 0,
                "Under Replicated": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.4",
            "name": "Topic-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070676602,
                "end": 1749074276602
              }
            },
            "results": [
              {
                "Topic Bytes In": 0,
                "Topic Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.5",
            "name": "Metric Streams Attributes",
            "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070676565,
                "end": 1749074276565
              }
            },
            "results": [
              {
                "Has Broker ID": 0,
                "Has Cluster Name": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Standard Kafka Integration": {
      "queries": [
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.1",
            "name": "Broker Sample Data",
            "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070676553,
                "end": 1749074276553
              }
            },
            "results": [
              {
                "count": 1625
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1625
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.2",
            "name": "Topic Sample Data",
            "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070677010,
                "end": 1749074277010
              }
            },
            "results": [
              {
                "count": 484
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 484
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.3",
            "name": "Offset Sample Data",
            "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaOffsetSample"
              ],
              "timeWindow": {
                "begin": 1749070677010,
                "end": 1749074277010
              }
            },
            "results": [
              {
                "count": 4017
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4017
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.4",
            "name": "Producer Sample Data",
            "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaProducerSample"
              ],
              "timeWindow": {
                "begin": 1749070677009,
                "end": 1749074277009
              }
            },
            "results": [
              {
                "count": 30
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 30
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.5",
            "name": "Consumer Sample Data",
            "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaConsumerSample"
              ],
              "timeWindow": {
                "begin": 1749070676981,
                "end": 1749074276981
              }
            },
            "results": [
              {
                "count": 114
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 114
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Data Quality": {
      "queries": [
        {
          "category": "Data Quality",
          "query": {
            "id": "4.1",
            "name": "Check for Null Values",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070676974,
                "end": 1749074276974
              }
            },
            "results": [
              {
                "Null Active Controllers": 0,
                "Null Cluster Names": 0,
                "Null Offline Partitions": 121,
                "Total Records": 411
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.2",
            "name": "Data Freshness (Polling)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
            "critical": true
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749073977439,
                "end": 1749074277439
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Age in Seconds": 120,
                "Last Data Point": 1749074263000,
                "Recent Samples": 29,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Age in Seconds": 120,
                "Last Data Point": 1749074244000,
                "Recent Samples": 9,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.3",
            "name": "Data Freshness (Metric Streams)",
            "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749073977430,
                "end": 1749074277430
              }
            },
            "results": [
              {
                "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
                "Age in Seconds": 180,
                "Last Data Point": 1749074220000,
                "Recent Samples": 104,
                "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.4",
            "name": "Tag Completeness",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070677441,
                "end": 1749074277441
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Has Cluster Label": 203,
                "Has Environment Label": 203,
                "Has Environment Tag": 325,
                "Has Integration Label": 203,
                "Total Records": 325,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Has Cluster Label": 86,
                "Has Environment Label": 86,
                "Has Environment Tag": 86,
                "Has Integration Label": 86,
                "Total Records": 86,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.5",
            "name": "Data Consistency Check",
            "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070677396,
                "end": 1749074277396
              }
            },
            "results": [
              {
                "Clusters in ClusterSample": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Throughput Calculations": {
      "queries": [
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.1",
            "name": "Cluster Throughput Summary",
            "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070677390,
                "end": 1749074277390
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Total Bytes In/Sec": 194900.2872846006,
                "Total Bytes Out/Sec": 392189.9967360694,
                "Total Messages In/Sec": 2296.3106258606936,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.2",
            "name": "Throughput Aggregation",
            "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [],
              "timeWindow": {
                "begin": 1749070677941,
                "end": 1749074277941
              }
            },
            "results": [
              {
                "Total Incoming": 955.3935651205912,
                "Total Outgoing": 1922.4999840003402
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.3",
            "name": "Topic Throughput",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070677947,
                "end": 1749074277947
              }
            },
            "results": [
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-events",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-events"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-logs",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.4",
            "name": "Message Rates",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070677946,
                "end": 1749074277946
              }
            },
            "results": [
              {
                "Total Messages In": 2296.3106258606936
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2296.3106258606936
        }
      ],
      "summary": {
        "total": 4,
        "success": 4,
        "hasData": 4,
        "failed": 0
      }
    },
    "Entity Relationships": {
      "queries": [
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.1",
            "name": "Brokers per Cluster",
            "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070677907,
                "end": 1749074277907
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.2",
            "name": "Topics per Cluster",
            "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070677915,
                "end": 1749074277915
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.3",
            "name": "Entity GUIDs Present",
            "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070678469,
                "end": 1749074278469
              }
            },
            "results": [
              {
                "Total Entity GUIDs": 0,
                "Unique Entity GUIDs": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Health Metrics": {
      "queries": [
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.1",
            "name": "Cluster Health Status",
            "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070678473,
                "end": 1749074278473
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.2",
            "name": "Broker Health Status",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070678425,
                "end": 1749074278425
              }
            },
            "results": [
              {
                "facet": [
                  "minikube-kafka",
                  "1"
                ],
                "Bytes In Rate": 950.9,
                "Bytes Out Rate": 2147,
                "Message Rate": 6.7
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.3",
            "name": "Unhealthy Cluster Count",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070678436,
                "end": 1749074278436
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Time Series Data": {
      "queries": [
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.1",
            "name": "Throughput Time Series",
            "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070678464,
                "end": 1749074278464
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749070678,
                "endTimeSeconds": 1749070978,
                "Incoming Throughput": 4764.411234705228,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749070978,
                "endTimeSeconds": 1749071278,
                "Incoming Throughput": 7267.7079718205405,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749071278,
                "endTimeSeconds": 1749071578,
                "Incoming Throughput": 6761.266666666666,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749071578,
                "endTimeSeconds": 1749071878,
                "Incoming Throughput": 12953.331071560993,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749071878,
                "endTimeSeconds": 1749072178,
                "Incoming Throughput": 15142.357434186135,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072178,
                "endTimeSeconds": 1749072478,
                "Incoming Throughput": 20405.94352984798,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072478,
                "endTimeSeconds": 1749072778,
                "Incoming Throughput": 22185.791797764712,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072778,
                "endTimeSeconds": 1749073078,
                "Incoming Throughput": 21645.00170758515,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073078,
                "endTimeSeconds": 1749073378,
                "Incoming Throughput": 20431.699127999367,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073378,
                "endTimeSeconds": 1749073678,
                "Incoming Throughput": 21375.060947135684,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073678,
                "endTimeSeconds": 1749073978,
                "Incoming Throughput": 22695.81434927697,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073978,
                "endTimeSeconds": 1749074278,
                "Incoming Throughput": 19271.90144605117,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.2",
            "name": "Message Rate Time Series",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070678984,
                "end": 1749074278984
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749070678,
                "endTimeSeconds": 1749070978,
                "Message Rate": 68.03752317389693
              },
              {
                "beginTimeSeconds": 1749070978,
                "endTimeSeconds": 1749071278,
                "Message Rate": 109.53900630329996
              },
              {
                "beginTimeSeconds": 1749071278,
                "endTimeSeconds": 1749071578,
                "Message Rate": 109.03333333333333
              },
              {
                "beginTimeSeconds": 1749071578,
                "endTimeSeconds": 1749071878,
                "Message Rate": 190.2783833889507
              },
              {
                "beginTimeSeconds": 1749071878,
                "endTimeSeconds": 1749072178,
                "Message Rate": 191.68212829069338
              },
              {
                "beginTimeSeconds": 1749072178,
                "endTimeSeconds": 1749072478,
                "Message Rate": 230.40381905821283
              },
              {
                "beginTimeSeconds": 1749072478,
                "endTimeSeconds": 1749072778,
                "Message Rate": 237.97844695163943
              },
              {
                "beginTimeSeconds": 1749072778,
                "endTimeSeconds": 1749073078,
                "Message Rate": 237.4011011814474
              },
              {
                "beginTimeSeconds": 1749073078,
                "endTimeSeconds": 1749073378,
                "Message Rate": 227.0872745510885
              },
              {
                "beginTimeSeconds": 1749073378,
                "endTimeSeconds": 1749073678,
                "Message Rate": 231.46549394403792
              },
              {
                "beginTimeSeconds": 1749073678,
                "endTimeSeconds": 1749073978,
                "Message Rate": 248.8742306266222
              },
              {
                "beginTimeSeconds": 1749073978,
                "endTimeSeconds": 1749074278,
                "Message Rate": 214.52988505747123
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.3",
            "name": "Partition Count Trend",
            "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070678984,
                "end": 1749074278984
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749070678,
                "endTimeSeconds": 1749071278,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749071278,
                "endTimeSeconds": 1749071878,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749071878,
                "endTimeSeconds": 1749072478,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749072478,
                "endTimeSeconds": 1749073078,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749073078,
                "endTimeSeconds": 1749073678,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749073678,
                "endTimeSeconds": 1749074278,
                "Partitions": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Account Aggregation": {
      "queries": [
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.1",
            "name": "Account Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070678946,
                "end": 1749074278946
              }
            },
            "results": [
              {
                "Cluster Count": 0,
                "Named Cluster Count": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.2",
            "name": "Account Health Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070679003,
                "end": 1749074279003
              }
            },
            "results": [
              {
                "Total Clusters": 0,
                "Unhealthy Clusters": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Performance Metrics": {
      "queries": [
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.1",
            "name": "Data Volume Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070678953,
                "end": 1749074278953
              }
            },
            "results": [
              {
                "Broker Events": 325,
                "Cluster Events": 411,
                "Topic Events": 1625
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.2",
            "name": "Large Dataset Check",
            "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070679422,
                "end": 1749074279422
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "Total Events": 1625,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Edge Cases": {
      "queries": [
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.1",
            "name": "Idle Topics",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070679435,
                "end": 1749074279435
              }
            },
            "results": [
              {
                "Avg Bytes In": null,
                "Avg Bytes Out": null,
                "Total Topics": 1625
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.2",
            "name": "Stale Data Detection",
            "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070679423,
                "end": 1749074279423
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Earliest Timestamp": 1749070680000,
                "Latest Timestamp": 1749074263000,
                "Total Samples": 325,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Earliest Timestamp": 1749071691000,
                "Latest Timestamp": 1749074244000,
                "Total Samples": 86,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.3",
            "name": "Partial Data Check",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070679391,
                "end": 1749074279391
              }
            },
            "results": [
              {
                "Missing Bytes In": 1625,
                "Missing Bytes Out": 1625,
                "Total Topics": 1625
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Top N Analysis": {
      "queries": [
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.1",
            "name": "Top 10 Topics by Throughput",
            "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070679380,
                "end": 1749074279380
              }
            },
            "results": [
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-events",
                "Avg Bytes In": null,
                "Sample Count": 407,
                "displayName": "aws-msk-topic:minikube-kafka-topic-events"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-logs",
                "Avg Bytes In": null,
                "Sample Count": 407,
                "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
                "Avg Bytes In": null,
                "Sample Count": 406,
                "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
                "Avg Bytes In": null,
                "Sample Count": 405,
                "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.2",
            "name": "Top 5 Clusters by Size",
            "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070679909,
                "end": 1749074279909
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "Topic Count": 5,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Confluent Cloud Compatibility": {
      "queries": [
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.1",
            "name": "Common Throughput Pattern",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070679911,
                "end": 1749074279911
              }
            },
            "results": [
              {
                "Has Bytes In": 204,
                "Has Bytes Out": 204
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.2",
            "name": "Common Message Pattern",
            "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070679871,
                "end": 1749074279871
              }
            },
            "results": [
              {
                "Has Messages In": 204,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Filter Validation": {
      "queries": [
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.1",
            "name": "Available Clusters",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070679909,
                "end": 1749074279909
              }
            },
            "results": [
              {
                "Total Samples": 411
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 411
        },
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.2",
            "name": "Available Topics",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070679882,
                "end": 1749074279882
              }
            },
            "results": [
              {
                "Total Samples": 1625
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1625
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Metric Calculations": {
      "queries": [
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.1",
            "name": "Throughput Range",
            "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070680423,
                "end": 1749074280423
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Avg Throughput": 960.0999373625646,
                "Max Throughput": 1746.25,
                "Min Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.2",
            "name": "Percentage Calculations",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070680427,
                "end": 1749074280427
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0,
                "Unhealthy %": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Summary Verification": {
      "queries": [
        {
          "category": "Summary Verification",
          "query": {
            "id": "16.1",
            "name": "Complete Data Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070680426,
                "end": 1749074280426
              }
            },
            "results": [
              {
                "Has Broker Data": 324,
                "Has Cluster Data": 410,
                "Has Topic Data": 1617,
                "Newest Data": 1749074263000,
                "Oldest Data": 1749070694000
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 1,
        "success": 1,
        "hasData": 1,
        "failed": 0
      }
    },
    "Standard vs MSK Comparison": {
      "queries": [
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.1",
            "name": "Entity Count Comparison",
            "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample",
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070680392,
                "end": 1749074280392
              }
            },
            "results": [
              {
                "MSK Brokers": 2,
                "Standard Brokers": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.2",
            "name": "Metric Coverage Comparison",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070680393,
                "end": 1749074280393
              }
            },
            "results": [
              {
                "MSK Topic Events": 1617,
                "Standard Topic Events": 484
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    }
  },
  "details": [
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.1",
        "name": "Cluster Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070675743,
            "end": 1749074275743
          }
        },
        "results": [
          {
            "count": 411
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 411
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.2",
        "name": "All Cluster Metrics Present",
        "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070675736,
            "end": 1749074275736
          }
        },
        "results": [
          {
            "Has Active Controller Count": 411,
            "Has Global Partition Count": 0,
            "Has Offline Partitions Count": 290
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.3",
        "name": "Broker Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070675705,
            "end": 1749074275705
          }
        },
        "results": [
          {
            "count": 325
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 325
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.4",
        "name": "All Broker Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070675738,
            "end": 1749074275738
          }
        },
        "results": [
          {
            "Has Bytes In": 204,
            "Has Bytes Out": 204,
            "Has Messages In": 204,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.5",
        "name": "Topic Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070675725,
            "end": 1749074275725
          }
        },
        "results": [
          {
            "count": 1625
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1625
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.6",
        "name": "Topic Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070676162,
            "end": 1749074276162
          }
        },
        "results": [
          {
            "Has Bytes In": 0,
            "Has Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.7",
        "name": "Cluster Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070676158,
            "end": 1749074276158
          }
        },
        "results": [
          {
            "Has Cluster Name": 411,
            "Has Entity GUID": 0,
            "Has Entity Name": 411
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.8",
        "name": "Broker Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070676174,
            "end": 1749074276174
          }
        },
        "results": [
          {
            "Has Broker ID": 325,
            "Has Cluster Name": 325,
            "Has Entity GUID": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.9",
        "name": "Topic Attributes Present",
        "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070676124,
            "end": 1749074276124
          }
        },
        "results": [
          {
            "Has Display Name": 1625,
            "Has Entity GUID": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.1",
        "name": "Metric Events Exist",
        "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070676140,
            "end": 1749074276140
          }
        },
        "results": [
          {
            "count": 7327
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 7327
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.2",
        "name": "Cluster-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070676597,
            "end": 1749074276597
          }
        },
        "results": [
          {
            "Active Controller": 0,
            "Global Partitions": 0,
            "Offline Partitions": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.3",
        "name": "Broker-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070676591,
            "end": 1749074276591
          }
        },
        "results": [
          {
            "Broker Bytes In": 0,
            "Broker Bytes Out": 0,
            "Under Replicated": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.4",
        "name": "Topic-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070676602,
            "end": 1749074276602
          }
        },
        "results": [
          {
            "Topic Bytes In": 0,
            "Topic Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.5",
        "name": "Metric Streams Attributes",
        "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070676565,
            "end": 1749074276565
          }
        },
        "results": [
          {
            "Has Broker ID": 0,
            "Has Cluster Name": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.1",
        "name": "Broker Sample Data",
        "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070676553,
            "end": 1749074276553
          }
        },
        "results": [
          {
            "count": 1625
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1625
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.2",
        "name": "Topic Sample Data",
        "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070677010,
            "end": 1749074277010
          }
        },
        "results": [
          {
            "count": 484
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 484
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.3",
        "name": "Offset Sample Data",
        "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaOffsetSample"
          ],
          "timeWindow": {
            "begin": 1749070677010,
            "end": 1749074277010
          }
        },
        "results": [
          {
            "count": 4017
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4017
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.4",
        "name": "Producer Sample Data",
        "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaProducerSample"
          ],
          "timeWindow": {
            "begin": 1749070677009,
            "end": 1749074277009
          }
        },
        "results": [
          {
            "count": 30
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 30
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.5",
        "name": "Consumer Sample Data",
        "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaConsumerSample"
          ],
          "timeWindow": {
            "begin": 1749070676981,
            "end": 1749074276981
          }
        },
        "results": [
          {
            "count": 114
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 114
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.1",
        "name": "Check for Null Values",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070676974,
            "end": 1749074276974
          }
        },
        "results": [
          {
            "Null Active Controllers": 0,
            "Null Cluster Names": 0,
            "Null Offline Partitions": 121,
            "Total Records": 411
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.2",
        "name": "Data Freshness (Polling)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
        "critical": true
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          120 as 'Age in Seconds'\n        FROM AwsMskClusterSample \n        SINCE 5 minutes ago\n        FACET provider.clusterName",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749073977439,
            "end": 1749074277439
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Age in Seconds": 120,
            "Last Data Point": 1749074263000,
            "Recent Samples": 29,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Age in Seconds": 120,
            "Last Data Point": 1749074244000,
            "Recent Samples": 9,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.3",
        "name": "Data Freshness (Metric Streams)",
        "query": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Recent Samples',\n          latest(timestamp) as 'Last Data Point',\n          180 as 'Age in Seconds'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        SINCE 5 minutes ago\n        FACET entity.name",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749073977430,
            "end": 1749074277430
          }
        },
        "results": [
          {
            "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
            "Age in Seconds": 180,
            "Last Data Point": 1749074220000,
            "Recent Samples": 104,
            "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.4",
        "name": "Tag Completeness",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070677441,
            "end": 1749074277441
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Has Cluster Label": 203,
            "Has Environment Label": 203,
            "Has Environment Tag": 325,
            "Has Integration Label": 203,
            "Total Records": 325,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Has Cluster Label": 86,
            "Has Environment Label": 86,
            "Has Environment Tag": 86,
            "Has Integration Label": 86,
            "Total Records": 86,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.5",
        "name": "Data Consistency Check",
        "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070677396,
            "end": 1749074277396
          }
        },
        "results": [
          {
            "Clusters in ClusterSample": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.1",
        "name": "Cluster Throughput Summary",
        "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070677390,
            "end": 1749074277390
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Total Bytes In/Sec": 194900.2872846006,
            "Total Bytes Out/Sec": 392189.9967360694,
            "Total Messages In/Sec": 2296.3106258606936,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.2",
        "name": "Throughput Aggregation",
        "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [],
          "timeWindow": {
            "begin": 1749070677941,
            "end": 1749074277941
          }
        },
        "results": [
          {
            "Total Incoming": 955.3935651205912,
            "Total Outgoing": 1922.4999840003402
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.3",
        "name": "Topic Throughput",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070677947,
            "end": 1749074277947
          }
        },
        "results": [
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-events",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-events"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-logs",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.4",
        "name": "Message Rates",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070677946,
            "end": 1749074277946
          }
        },
        "results": [
          {
            "Total Messages In": 2296.3106258606936
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2296.3106258606936
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.1",
        "name": "Brokers per Cluster",
        "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070677907,
            "end": 1749074277907
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.2",
        "name": "Topics per Cluster",
        "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070677915,
            "end": 1749074277915
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.3",
        "name": "Entity GUIDs Present",
        "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070678469,
            "end": 1749074278469
          }
        },
        "results": [
          {
            "Total Entity GUIDs": 0,
            "Unique Entity GUIDs": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.1",
        "name": "Cluster Health Status",
        "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070678473,
            "end": 1749074278473
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.2",
        "name": "Broker Health Status",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070678425,
            "end": 1749074278425
          }
        },
        "results": [
          {
            "facet": [
              "minikube-kafka",
              "1"
            ],
            "Bytes In Rate": 950.9,
            "Bytes Out Rate": 2147,
            "Message Rate": 6.7
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.3",
        "name": "Unhealthy Cluster Count",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070678436,
            "end": 1749074278436
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.1",
        "name": "Throughput Time Series",
        "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070678464,
            "end": 1749074278464
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749070678,
            "endTimeSeconds": 1749070978,
            "Incoming Throughput": 4764.411234705228,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749070978,
            "endTimeSeconds": 1749071278,
            "Incoming Throughput": 7267.7079718205405,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749071278,
            "endTimeSeconds": 1749071578,
            "Incoming Throughput": 6761.266666666666,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749071578,
            "endTimeSeconds": 1749071878,
            "Incoming Throughput": 12953.331071560993,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749071878,
            "endTimeSeconds": 1749072178,
            "Incoming Throughput": 15142.357434186135,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072178,
            "endTimeSeconds": 1749072478,
            "Incoming Throughput": 20405.94352984798,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072478,
            "endTimeSeconds": 1749072778,
            "Incoming Throughput": 22185.791797764712,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072778,
            "endTimeSeconds": 1749073078,
            "Incoming Throughput": 21645.00170758515,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073078,
            "endTimeSeconds": 1749073378,
            "Incoming Throughput": 20431.699127999367,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073378,
            "endTimeSeconds": 1749073678,
            "Incoming Throughput": 21375.060947135684,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073678,
            "endTimeSeconds": 1749073978,
            "Incoming Throughput": 22695.81434927697,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073978,
            "endTimeSeconds": 1749074278,
            "Incoming Throughput": 19271.90144605117,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.2",
        "name": "Message Rate Time Series",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070678984,
            "end": 1749074278984
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749070678,
            "endTimeSeconds": 1749070978,
            "Message Rate": 68.03752317389693
          },
          {
            "beginTimeSeconds": 1749070978,
            "endTimeSeconds": 1749071278,
            "Message Rate": 109.53900630329996
          },
          {
            "beginTimeSeconds": 1749071278,
            "endTimeSeconds": 1749071578,
            "Message Rate": 109.03333333333333
          },
          {
            "beginTimeSeconds": 1749071578,
            "endTimeSeconds": 1749071878,
            "Message Rate": 190.2783833889507
          },
          {
            "beginTimeSeconds": 1749071878,
            "endTimeSeconds": 1749072178,
            "Message Rate": 191.68212829069338
          },
          {
            "beginTimeSeconds": 1749072178,
            "endTimeSeconds": 1749072478,
            "Message Rate": 230.40381905821283
          },
          {
            "beginTimeSeconds": 1749072478,
            "endTimeSeconds": 1749072778,
            "Message Rate": 237.97844695163943
          },
          {
            "beginTimeSeconds": 1749072778,
            "endTimeSeconds": 1749073078,
            "Message Rate": 237.4011011814474
          },
          {
            "beginTimeSeconds": 1749073078,
            "endTimeSeconds": 1749073378,
            "Message Rate": 227.0872745510885
          },
          {
            "beginTimeSeconds": 1749073378,
            "endTimeSeconds": 1749073678,
            "Message Rate": 231.46549394403792
          },
          {
            "beginTimeSeconds": 1749073678,
            "endTimeSeconds": 1749073978,
            "Message Rate": 248.8742306266222
          },
          {
            "beginTimeSeconds": 1749073978,
            "endTimeSeconds": 1749074278,
            "Message Rate": 214.52988505747123
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.3",
        "name": "Partition Count Trend",
        "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070678984,
            "end": 1749074278984
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749070678,
            "endTimeSeconds": 1749071278,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749071278,
            "endTimeSeconds": 1749071878,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749071878,
            "endTimeSeconds": 1749072478,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749072478,
            "endTimeSeconds": 1749073078,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749073078,
            "endTimeSeconds": 1749073678,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749073678,
            "endTimeSeconds": 1749074278,
            "Partitions": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.1",
        "name": "Account Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070678946,
            "end": 1749074278946
          }
        },
        "results": [
          {
            "Cluster Count": 0,
            "Named Cluster Count": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.2",
        "name": "Account Health Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070679003,
            "end": 1749074279003
          }
        },
        "results": [
          {
            "Total Clusters": 0,
            "Unhealthy Clusters": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.1",
        "name": "Data Volume Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070678953,
            "end": 1749074278953
          }
        },
        "results": [
          {
            "Broker Events": 325,
            "Cluster Events": 411,
            "Topic Events": 1625
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.2",
        "name": "Large Dataset Check",
        "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070679422,
            "end": 1749074279422
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "Total Events": 1625,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.1",
        "name": "Idle Topics",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070679435,
            "end": 1749074279435
          }
        },
        "results": [
          {
            "Avg Bytes In": null,
            "Avg Bytes Out": null,
            "Total Topics": 1625
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.2",
        "name": "Stale Data Detection",
        "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070679423,
            "end": 1749074279423
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Earliest Timestamp": 1749070680000,
            "Latest Timestamp": 1749074263000,
            "Total Samples": 325,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Earliest Timestamp": 1749071691000,
            "Latest Timestamp": 1749074244000,
            "Total Samples": 86,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.3",
        "name": "Partial Data Check",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070679391,
            "end": 1749074279391
          }
        },
        "results": [
          {
            "Missing Bytes In": 1625,
            "Missing Bytes Out": 1625,
            "Total Topics": 1625
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.1",
        "name": "Top 10 Topics by Throughput",
        "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070679380,
            "end": 1749074279380
          }
        },
        "results": [
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-events",
            "Avg Bytes In": null,
            "Sample Count": 407,
            "displayName": "aws-msk-topic:minikube-kafka-topic-events"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-logs",
            "Avg Bytes In": null,
            "Sample Count": 407,
            "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
            "Avg Bytes In": null,
            "Sample Count": 406,
            "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
            "Avg Bytes In": null,
            "Sample Count": 405,
            "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.2",
        "name": "Top 5 Clusters by Size",
        "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070679909,
            "end": 1749074279909
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "Topic Count": 5,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.1",
        "name": "Common Throughput Pattern",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070679911,
            "end": 1749074279911
          }
        },
        "results": [
          {
            "Has Bytes In": 204,
            "Has Bytes Out": 204
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.2",
        "name": "Common Message Pattern",
        "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070679871,
            "end": 1749074279871
          }
        },
        "results": [
          {
            "Has Messages In": 204,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.1",
        "name": "Available Clusters",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070679909,
            "end": 1749074279909
          }
        },
        "results": [
          {
            "Total Samples": 411
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 411
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.2",
        "name": "Available Topics",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070679882,
            "end": 1749074279882
          }
        },
        "results": [
          {
            "Total Samples": 1625
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1625
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.1",
        "name": "Throughput Range",
        "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070680423,
            "end": 1749074280423
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Avg Throughput": 960.0999373625646,
            "Max Throughput": 1746.25,
            "Min Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.2",
        "name": "Percentage Calculations",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070680427,
            "end": 1749074280427
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0,
            "Unhealthy %": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Summary Verification",
      "query": {
        "id": "16.1",
        "name": "Complete Data Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070680426,
            "end": 1749074280426
          }
        },
        "results": [
          {
            "Has Broker Data": 324,
            "Has Cluster Data": 410,
            "Has Topic Data": 1617,
            "Newest Data": 1749074263000,
            "Oldest Data": 1749070694000
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.1",
        "name": "Entity Count Comparison",
        "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample",
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070680392,
            "end": 1749074280392
          }
        },
        "results": [
          {
            "MSK Brokers": 2,
            "Standard Brokers": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.2",
        "name": "Metric Coverage Comparison",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070680393,
            "end": 1749074280393
          }
        },
        "results": [
          {
            "MSK Topic Events": 1617,
            "Standard Topic Events": 484
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    }
  ]
}