name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -e NEW_RELIC_ACCOUNT_ID=test \
          -e NEW_RELIC_API_KEY=test \
          -e NEW_RELIC_INGEST_KEY=test \
          -e MODE=simulation \
          -e DURATION=10 \
          -p 3000:3000 \
          ${{ env.IMAGE_NAME }}:test
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoints
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/health/live || exit 1
        curl -f http://localhost:3000/health/ready || exit 1
        curl -f http://localhost:3000/metrics || exit 1
        
        # Stop container
        docker stop test-container

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
          
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for Kafka
      run: |
        echo "Waiting for Kafka to be ready..."
        for i in {1..30}; do
          if docker exec ${{ job.services.kafka.id }} kafka-broker-api-versions --bootstrap-server localhost:9092; then
            echo "Kafka is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 10
        done
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        NEW_RELIC_ACCOUNT_ID: ${{ secrets.TEST_NR_ACCOUNT_ID }}
        NEW_RELIC_API_KEY: ${{ secrets.TEST_NR_API_KEY }}
        NEW_RELIC_INGEST_KEY: ${{ secrets.TEST_NR_INGEST_KEY }}

  helm-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Lint Helm chart
      run: |
        helm lint helm/message-queues-platform
        
    - name: Template Helm chart
      run: |
        helm template test-release helm/message-queues-platform \
          --set secrets.newrelic.accountId=test \
          --set secrets.newrelic.apiKey=test \
          --set secrets.newrelic.ingestKey=test \
          --dry-run --debug

  validate-k8s-manifests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
        
    - name: Validate Kubernetes manifests
      run: |
        find k8s/ -name "*.yaml" -exec kubeval {} \;
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Validate Helm templates
      run: |
        helm template test-release helm/message-queues-platform \
          --set secrets.newrelic.accountId=test \
          --set secrets.newrelic.apiKey=test \
          --set secrets.newrelic.ingestKey=test | kubeval

  check-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Check for vulnerabilities
      run: npm audit --audit-level high
      
    - name: Check for outdated packages
      run: npm outdated || true
      
    - name: Dependency license check
      run: |
        npx license-checker --onlyAllow 'MIT;ISC;Apache-2.0;BSD;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense'