name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Package Helm chart
      run: |
        helm package helm/message-queues-platform --destination ./helm-packages/
        
    - name: Upload Helm chart to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./helm-packages/message-queues-platform-*.tgz
        asset_name: message-queues-platform-${{ github.event.release.tag_name }}.tgz
        asset_content_type: application/gzip

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        helm upgrade --install message-queues-platform-staging \
          helm/message-queues-platform \
          --namespace staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set secrets.newrelic.accountId="${{ secrets.STAGING_NR_ACCOUNT_ID }}" \
          --set secrets.newrelic.apiKey="${{ secrets.STAGING_NR_API_KEY }}" \
          --set secrets.newrelic.ingestKey="${{ secrets.STAGING_NR_INGEST_KEY }}" \
          --set platform.mode=simulation \
          --set replicaCount=1 \
          --wait --timeout=10m
          
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/message-queues-platform-staging -n staging
        
        # Port forward for testing
        kubectl port-forward svc/message-queues-platform-staging 3000:3000 -n staging &
        PF_PID=$!
        
        # Wait for port forward to be ready
        sleep 10
        
        # Run smoke tests
        curl -f http://localhost:3000/health
        curl -f http://localhost:3000/health/live
        curl -f http://localhost:3000/health/ready
        curl -f http://localhost:3000/metrics
        curl -f http://localhost:3000/info
        
        # Kill port forward
        kill $PF_PID

  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, publish-helm-chart]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        helm upgrade --install message-queues-platform-prod \
          helm/message-queues-platform \
          --namespace production \
          --create-namespace \
          --set image.tag=${{ github.event.release.tag_name }} \
          --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set secrets.newrelic.accountId="${{ secrets.PROD_NR_ACCOUNT_ID }}" \
          --set secrets.newrelic.apiKey="${{ secrets.PROD_NR_API_KEY }}" \
          --set secrets.newrelic.ingestKey="${{ secrets.PROD_NR_INGEST_KEY }}" \
          --set platform.mode=infrastructure \
          --set replicaCount=3 \
          --set autoscaling.enabled=true \
          --set autoscaling.maxReplicas=10 \
          --set monitoring.enabled=true \
          --wait --timeout=15m
          
    - name: Run production health checks
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/message-queues-platform-prod -n production
        
        # Verify all pods are running
        kubectl get pods -n production -l app.kubernetes.io/name=message-queues-platform
        
        # Check HPA status
        kubectl get hpa -n production
        
        echo "Production deployment successful!"

  notify-slack:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify Slack on failure
      if: needs.deploy-production.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}