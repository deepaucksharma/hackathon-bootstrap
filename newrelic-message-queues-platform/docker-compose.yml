version: '3.8'

services:
  # Main platform service
  message-queues-platform:
    build:
      context: .
      dockerfile: Dockerfile
    image: newrelic-message-queues-platform:latest
    container_name: mq-platform
    environment:
      # Platform configuration
      - NODE_ENV=production
      - MODE=${MODE:-simulation}
      - PROVIDER=${PROVIDER:-kafka}
      - INTERVAL=${INTERVAL:-60}
      
      # New Relic configuration
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_INGEST_KEY=${NEW_RELIC_INGEST_KEY}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-us}
      
      # Enhanced features
      - USE_ENHANCED_COLLECTOR=${USE_ENHANCED_COLLECTOR:-true}
      - ENABLE_CONSUMER_LAG=${ENABLE_CONSUMER_LAG:-true}
      - ENABLE_DETAILED_TOPICS=${ENABLE_DETAILED_TOPICS:-true}
      
      # Multi-cluster options
      - MULTI_CLUSTER=${MULTI_CLUSTER:-false}
      - CLUSTER_FILTER=${CLUSTER_FILTER:-}
      - MAX_CLUSTERS_PER_QUERY=${MAX_CLUSTERS_PER_QUERY:-10}
      - ENABLE_CLUSTER_DISCOVERY=${ENABLE_CLUSTER_DISCOVERY:-true}
      
      # Debug options
      - DEBUG=${DEBUG:-}
    ports:
      - "3336:3000"  # API endpoint
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - mq-network
    depends_on:
      - redis
    command: >
      node platform.js
      --mode ${MODE:-simulation}
      --provider ${PROVIDER:-kafka}
      --interval ${INTERVAL:-60}
      ${MULTI_CLUSTER:+--multi-cluster}
      ${CLUSTER_FILTER:+--cluster-filter "${CLUSTER_FILTER}"}

  # Redis for caching and state management
  redis:
    image: redis:7-alpine
    container_name: mq-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mq-network
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Optional: Kafka for infrastructure mode testing
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mq-kafka
    profiles:
      - infrastructure
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - mq-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mq-zookeeper
    profiles:
      - infrastructure
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mq-network

  # Optional: Prometheus for metrics export
  prometheus:
    image: prom/prometheus:latest
    container_name: mq-prometheus
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mq-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mq-grafana
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-changeme123!}  # Set GRAFANA_ADMIN_PASSWORD in .env
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mq-network
    depends_on:
      - prometheus

networks:
  mq-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: