apiVersion: apps/v1
kind: Deployment
metadata:
  name: mq-platform
  namespace: message-queues-platform
  labels:
    app: message-queues-platform
    component: platform
spec:
  replicas: 3
  selector:
    matchLabels:
      app: message-queues-platform
      component: platform
  template:
    metadata:
      labels:
        app: message-queues-platform
        component: platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mq-platform
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: platform
        image: newrelic-message-queues-platform:latest
        imagePullPolicy: IfNotPresent
        command: ["node", "platform.js"]
        ports:
        - name: health
          containerPort: 3001
          protocol: TCP
        env:
        # Load configuration from ConfigMap
        - name: MODE
          valueFrom:
            configMapKeyRef:
              name: mq-platform-config
              key: MODE
        - name: PROVIDER
          valueFrom:
            configMapKeyRef:
              name: mq-platform-config
              key: PROVIDER
        - name: INTERVAL
          valueFrom:
            configMapKeyRef:
              name: mq-platform-config
              key: INTERVAL
        # Load secrets
        - name: NEW_RELIC_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: mq-platform-secrets
              key: NEW_RELIC_ACCOUNT_ID
        - name: NEW_RELIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: mq-platform-secrets
              key: NEW_RELIC_API_KEY
        - name: NEW_RELIC_INGEST_KEY
          valueFrom:
            secretKeyRef:
              name: mq-platform-secrets
              key: NEW_RELIC_INGEST_KEY
        # Additional env vars from ConfigMap
        envFrom:
        - configMapRef:
            name: mq-platform-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - message-queues-platform
              topologyKey: kubernetes.io/hostname