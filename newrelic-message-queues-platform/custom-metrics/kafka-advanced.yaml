# Advanced Kafka Custom Metrics
# These metrics provide additional insights beyond standard nri-kafka metrics

partition_skew:
  description: "Measures partition count skew across brokers"
  unit: "percentage"
  type: "gauge"
  entityTypes: ["MESSAGE_QUEUE_CLUSTER"]
  provider: "calculation"
  formula: |
    const partitionCounts = context.brokers.map(b => b.partitionCount);
    const avg = partitionCounts.reduce((a, b) => a + b, 0) / partitionCounts.length;
    const maxSkew = Math.max(...partitionCounts.map(c => Math.abs(c - avg) / avg * 100));
    return maxSkew;
  validation:
    min: 0
    max: 100
  tags:
    category: "load-balancing"
    severity: "warning"

consumer_lag_ratio:
  description: "Ratio of consumer lag to total messages"
  unit: "ratio"
  type: "gauge"
  entityTypes: ["MESSAGE_QUEUE_CONSUMER_GROUP"]
  provider: "calculation"
  formula: |
    const totalLag = context.consumer.totalLag || 0;
    const totalMessages = context.consumer.totalMessages || 1;
    return totalLag / totalMessages;
  validation:
    min: 0
    max: 1
  tags:
    category: "consumer-health"
    severity: "critical"

replication_health_score:
  description: "Composite score for replication health"
  unit: "score"
  type: "gauge"
  entityTypes: ["MESSAGE_QUEUE_CLUSTER"]
  provider: "threshold"
  source:
    type: "composite"
    sources:
      - name: "underReplicated"
        path: "cluster.underReplicatedPartitions"
      - name: "offline"
        path: "cluster.offlinePartitions"
  thresholds:
    - condition: "> 10"
      score: 0
    - condition: "> 5"
      score: 25
    - condition: "> 0"
      score: 75
    - condition: "== 0"
      score: 100
  defaultScore: 50
  tags:
    category: "reliability"
    
broker_saturation_index:
  description: "Combined saturation metric for brokers"
  unit: "percentage"
  type: "gauge"
  entityTypes: ["MESSAGE_QUEUE_BROKER"]
  provider: "composite"
  sources:
    - name: "cpu"
      path: "broker.cpuUsage"
      weight: 0.3
    - name: "memory"
      path: "broker.memoryUsage"
      weight: 0.2
    - name: "network"
      path: "broker.networkUsage"
      weight: 0.3
    - name: "disk"
      path: "broker.diskUsage"
      weight: 0.2
  combine: |
    return sources.reduce((total, source) => {
      return total + (values[source.name] || 0) * source.weight;
    }, 0);
  validation:
    min: 0
    max: 100
  tags:
    category: "performance"
    
topic_retention_efficiency:
  description: "Measures how efficiently topics use retention settings"
  unit: "percentage"
  type: "gauge"
  entityTypes: ["MESSAGE_QUEUE_TOPIC"]
  collect: |
    const retentionBytes = context.topic.retentionBytes || 0;
    const actualBytes = context.topic.diskSize || 0;
    if (retentionBytes === 0) return 100;
    return Math.min(100, (actualBytes / retentionBytes) * 100);
  validation:
    min: 0
    max: 100
  tags:
    category: "storage"
    cost: "optimization"