{
  "timestamp": "2025-06-04T21:56:15.290Z",
  "config": {
    "accountId": "3630072",
    "timeRange": "1 hour ago",
    "clusterName": null
  },
  "summary": {
    "totalQueries": 55,
    "successful": 55,
    "withData": 55,
    "failed": 0
  },
  "scores": {
    "dataAvailability": 100,
    "metricCompleteness": 100,
    "dataFreshness": 0,
    "entityRelationships": 100,
    "overall": 80
  },
  "recommendations": [
    {
      "severity": "warning",
      "category": "Data Freshness",
      "message": "Some data sources have stale data (>5 minutes old).",
      "details": [
        "Check polling intervals and network connectivity"
      ]
    }
  ],
  "categories": {
    "MSK Polling Data": {
      "queries": [
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.1",
            "name": "Cluster Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070570043,
                "end": 1749074170043
              }
            },
            "results": [
              {
                "count": 402
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 402
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.2",
            "name": "All Cluster Metrics Present",
            "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070570076,
                "end": 1749074170076
              }
            },
            "results": [
              {
                "Has Active Controller Count": 402,
                "Has Global Partition Count": 0,
                "Has Offline Partitions Count": 281
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.3",
            "name": "Broker Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070570012,
                "end": 1749074170012
              }
            },
            "results": [
              {
                "count": 319
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 319
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.4",
            "name": "All Broker Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070570091,
                "end": 1749074170091
              }
            },
            "results": [
              {
                "Has Bytes In": 198,
                "Has Bytes Out": 198,
                "Has Messages In": 198,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.5",
            "name": "Topic Sample Data Exists",
            "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070570002,
                "end": 1749074170002
              }
            },
            "results": [
              {
                "count": 1577
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1577
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.6",
            "name": "Topic Metrics Present",
            "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070570515,
                "end": 1749074170515
              }
            },
            "results": [
              {
                "Has Bytes In": 0,
                "Has Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.7",
            "name": "Cluster Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070570486,
                "end": 1749074170486
              }
            },
            "results": [
              {
                "Has Cluster Name": 402,
                "Has Entity GUID": 0,
                "Has Entity Name": 402
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.8",
            "name": "Broker Attributes Present",
            "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070570498,
                "end": 1749074170498
              }
            },
            "results": [
              {
                "Has Broker ID": 319,
                "Has Cluster Name": 319,
                "Has Entity GUID": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "MSK Polling Data",
          "query": {
            "id": "1.9",
            "name": "Topic Attributes Present",
            "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070570457,
                "end": 1749074170457
              }
            },
            "results": [
              {
                "Has Display Name": 1577,
                "Has Entity GUID": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 9,
        "success": 9,
        "hasData": 9,
        "failed": 0
      }
    },
    "Metric Streams Data": {
      "queries": [
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.1",
            "name": "Metric Events Exist",
            "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070570512,
                "end": 1749074170512
              }
            },
            "results": [
              {
                "count": 7158
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 7158
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.2",
            "name": "Cluster-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070570932,
                "end": 1749074170932
              }
            },
            "results": [
              {
                "Active Controller": 0,
                "Global Partitions": 0,
                "Offline Partitions": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.3",
            "name": "Broker-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070570882,
                "end": 1749074170882
              }
            },
            "results": [
              {
                "Broker Bytes In": 0,
                "Broker Bytes Out": 0,
                "Under Replicated": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.4",
            "name": "Topic-Level Metrics",
            "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070570902,
                "end": 1749074170902
              }
            },
            "results": [
              {
                "Topic Bytes In": 0,
                "Topic Bytes Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Streams Data",
          "query": {
            "id": "2.5",
            "name": "Metric Streams Attributes",
            "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070570913,
                "end": 1749074170913
              }
            },
            "results": [
              {
                "Has Broker ID": 0,
                "Has Cluster Name": 0,
                "Has Topic Name": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Standard Kafka Integration": {
      "queries": [
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.1",
            "name": "Broker Sample Data",
            "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070570874,
                "end": 1749074170874
              }
            },
            "results": [
              {
                "count": 1595
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1595
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.2",
            "name": "Topic Sample Data",
            "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070571348,
                "end": 1749074171348
              }
            },
            "results": [
              {
                "count": 484
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 484
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.3",
            "name": "Offset Sample Data",
            "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaOffsetSample"
              ],
              "timeWindow": {
                "begin": 1749070571333,
                "end": 1749074171333
              }
            },
            "results": [
              {
                "count": 3912
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 3912
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.4",
            "name": "Producer Sample Data",
            "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaProducerSample"
              ],
              "timeWindow": {
                "begin": 1749070571317,
                "end": 1749074171317
              }
            },
            "results": [
              {
                "count": 29
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 29
        },
        {
          "category": "Standard Kafka Integration",
          "query": {
            "id": "3.5",
            "name": "Consumer Sample Data",
            "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaConsumerSample"
              ],
              "timeWindow": {
                "begin": 1749070571301,
                "end": 1749074171301
              }
            },
            "results": [
              {
                "count": 108
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 108
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Data Quality": {
      "queries": [
        {
          "category": "Data Quality",
          "query": {
            "id": "4.1",
            "name": "Check for Null Values",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070571299,
                "end": 1749074171299
              }
            },
            "results": [
              {
                "Null Active Controllers": 0,
                "Null Cluster Names": 0,
                "Null Offline Partitions": 121,
                "Total Records": 402
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.2",
            "name": "Data Freshness (Polling)",
            "query": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          latest(timestamp) as 'Latest Timestamp'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          latest(timestamp) as 'Latest Timestamp'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070571765,
                "end": 1749074171765
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Last Data Point": 1749074157000,
                "Latest Timestamp": 1749074157000,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Last Data Point": 1749074153000,
                "Latest Timestamp": 1749074153000,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.3",
            "name": "Data Freshness (Metric Streams)",
            "query": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          max(timestamp) as 'Latest Timestamp',\n          count(*) as 'Total Metric Points'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        FACET entity.name\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          max(timestamp) as 'Latest Timestamp',\n          count(*) as 'Total Metric Points'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        FACET entity.name\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "Metric"
              ],
              "timeWindow": {
                "begin": 1749070571748,
                "end": 1749074171748
              }
            },
            "results": [
              {
                "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
                "Last Data Point": 1749074100000,
                "Latest Timestamp": 1749074100000,
                "Total Metric Points": 1196,
                "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.4",
            "name": "Tag Completeness",
            "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070571709,
                "end": 1749074171709
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Has Cluster Label": 200,
                "Has Environment Label": 200,
                "Has Environment Tag": 319,
                "Has Integration Label": 200,
                "Total Records": 319,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Has Cluster Label": 83,
                "Has Environment Label": 83,
                "Has Environment Tag": 83,
                "Has Integration Label": 83,
                "Total Records": 83,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Data Quality",
          "query": {
            "id": "4.5",
            "name": "Data Consistency Check",
            "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070571706,
                "end": 1749074171706
              }
            },
            "results": [
              {
                "Clusters in ClusterSample": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        }
      ],
      "summary": {
        "total": 5,
        "success": 5,
        "hasData": 5,
        "failed": 0
      }
    },
    "Throughput Calculations": {
      "queries": [
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.1",
            "name": "Cluster Throughput Summary",
            "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070571738,
                "end": 1749074171738
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Total Bytes In/Sec": 187691.32061793396,
                "Total Bytes Out/Sec": 382069.0967360694,
                "Total Messages In/Sec": 2217.3772925273606,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.2",
            "name": "Throughput Aggregation",
            "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [],
              "timeWindow": {
                "begin": 1749070572270,
                "end": 1749074172270
              }
            },
            "results": [
              {
                "Total Incoming": 947.9359627168382,
                "Total Outgoing": 1929.6419027074214
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.3",
            "name": "Topic Throughput",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070572340,
                "end": 1749074172340
              }
            },
            "results": [
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-events",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-events"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-logs",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
                "Bytes In/Sec": 0,
                "Bytes Out/Sec": 0,
                "constant": 0,
                "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Throughput Calculations",
          "query": {
            "id": "5.4",
            "name": "Message Rates",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070572308,
                "end": 1749074172308
              }
            },
            "results": [
              {
                "Total Messages In": 2217.3772925273606
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2217.3772925273606
        }
      ],
      "summary": {
        "total": 4,
        "success": 4,
        "hasData": 4,
        "failed": 0
      }
    },
    "Entity Relationships": {
      "queries": [
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.1",
            "name": "Brokers per Cluster",
            "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070572458,
                "end": 1749074172458
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.2",
            "name": "Topics per Cluster",
            "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070572290,
                "end": 1749074172290
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Entity Relationships",
          "query": {
            "id": "6.3",
            "name": "Entity GUIDs Present",
            "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070572928,
                "end": 1749074172928
              }
            },
            "results": [
              {
                "Total Entity GUIDs": 0,
                "Unique Entity GUIDs": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Health Metrics": {
      "queries": [
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.1",
            "name": "Cluster Health Status",
            "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070572962,
                "end": 1749074172962
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Active Controllers": 1,
                "Offline Partitions": 0,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.2",
            "name": "Broker Health Status",
            "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
            "critical": false
          },
          "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070572909,
                "end": 1749074172909
              }
            },
            "results": [
              {
                "facet": [
                  "minikube-kafka",
                  "1"
                ],
                "Bytes In Rate": 1505.4666666666667,
                "Bytes Out Rate": 2857.3333333333335,
                "Message Rate": 16.7
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Health Metrics",
          "query": {
            "id": "7.3",
            "name": "Unhealthy Cluster Count",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070572908,
                "end": 1749074172908
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Time Series Data": {
      "queries": [
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.1",
            "name": "Throughput Time Series",
            "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070572930,
                "end": 1749074172930
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749070572,
                "endTimeSeconds": 1749070872,
                "Incoming Throughput": 1577.5204301075269,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749070872,
                "endTimeSeconds": 1749071172,
                "Incoming Throughput": 8638.657471264367,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749071172,
                "endTimeSeconds": 1749071472,
                "Incoming Throughput": 6383.874638487207,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749071472,
                "endTimeSeconds": 1749071772,
                "Incoming Throughput": 7676.215016685205,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749071772,
                "endTimeSeconds": 1749072072,
                "Incoming Throughput": 16856.064293659623,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072072,
                "endTimeSeconds": 1749072372,
                "Incoming Throughput": 18276.08487208009,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072372,
                "endTimeSeconds": 1749072672,
                "Incoming Throughput": 23019.477559722447,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072672,
                "endTimeSeconds": 1749072972,
                "Incoming Throughput": 19726.597851448696,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749072972,
                "endTimeSeconds": 1749073272,
                "Incoming Throughput": 21857.4227289581,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073272,
                "endTimeSeconds": 1749073572,
                "Incoming Throughput": 21416.06879083768,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073572,
                "endTimeSeconds": 1749073872,
                "Incoming Throughput": 22424.427027715985,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "minikube-kafka",
                "beginTimeSeconds": 1749073872,
                "endTimeSeconds": 1749074172,
                "Incoming Throughput": 19838.909936967004,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.2",
            "name": "Message Rate Time Series",
            "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070573484,
                "end": 1749074173484
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749070573,
                "endTimeSeconds": 1749070873,
                "Message Rate": 18.589247311827958
              },
              {
                "beginTimeSeconds": 1749070873,
                "endTimeSeconds": 1749071173,
                "Message Rate": 131.9525769373378
              },
              {
                "beginTimeSeconds": 1749071173,
                "endTimeSeconds": 1749071473,
                "Message Rate": 100.3680385613645
              },
              {
                "beginTimeSeconds": 1749071473,
                "endTimeSeconds": 1749071773,
                "Message Rate": 123.0823878383389
              },
              {
                "beginTimeSeconds": 1749071773,
                "endTimeSeconds": 1749072073,
                "Message Rate": 222.22295142751207
              },
              {
                "beginTimeSeconds": 1749072073,
                "endTimeSeconds": 1749072373,
                "Message Rate": 217.52513904338156
              },
              {
                "beginTimeSeconds": 1749072373,
                "endTimeSeconds": 1749072673,
                "Message Rate": 248.29654113035645
              },
              {
                "beginTimeSeconds": 1749072673,
                "endTimeSeconds": 1749072973,
                "Message Rate": 225.47963288333838
              },
              {
                "beginTimeSeconds": 1749072973,
                "endTimeSeconds": 1749073273,
                "Message Rate": 232.84757137560246
              },
              {
                "beginTimeSeconds": 1749073273,
                "endTimeSeconds": 1749073573,
                "Message Rate": 233.58694171669535
              },
              {
                "beginTimeSeconds": 1749073573,
                "endTimeSeconds": 1749073873,
                "Message Rate": 241.19489611473065
              },
              {
                "beginTimeSeconds": 1749073873,
                "endTimeSeconds": 1749074173,
                "Message Rate": 222.2313681868743
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 12
        },
        {
          "category": "Time Series Data",
          "query": {
            "id": "8.3",
            "name": "Partition Count Trend",
            "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070573453,
                "end": 1749074173453
              }
            },
            "results": [
              {
                "beginTimeSeconds": 1749070573,
                "endTimeSeconds": 1749071173,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749071173,
                "endTimeSeconds": 1749071773,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749071773,
                "endTimeSeconds": 1749072373,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749072373,
                "endTimeSeconds": 1749072973,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749072973,
                "endTimeSeconds": 1749073573,
                "Partitions": null
              },
              {
                "beginTimeSeconds": 1749073573,
                "endTimeSeconds": 1749074173,
                "Partitions": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 6
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Account Aggregation": {
      "queries": [
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.1",
            "name": "Account Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070573437,
                "end": 1749074173437
              }
            },
            "results": [
              {
                "Cluster Count": 0,
                "Named Cluster Count": 2
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Account Aggregation",
          "query": {
            "id": "9.2",
            "name": "Account Health Summary",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070573454,
                "end": 1749074173454
              }
            },
            "results": [
              {
                "Total Clusters": 0,
                "Unhealthy Clusters": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Performance Metrics": {
      "queries": [
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.1",
            "name": "Data Volume Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070573450,
                "end": 1749074173450
              }
            },
            "results": [
              {
                "Broker Events": 319,
                "Cluster Events": 402,
                "Topic Events": 1577
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Performance Metrics",
          "query": {
            "id": "10.2",
            "name": "Large Dataset Check",
            "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070573898,
                "end": 1749074173898
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Topic Count": 4,
                "Total Events": 1577,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Edge Cases": {
      "queries": [
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.1",
            "name": "Idle Topics",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070573848,
                "end": 1749074173848
              }
            },
            "results": [
              {
                "Avg Bytes In": null,
                "Avg Bytes Out": null,
                "Total Topics": 1577
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.2",
            "name": "Stale Data Detection",
            "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070573868,
                "end": 1749074173868
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Earliest Timestamp": 1749070574000,
                "Latest Timestamp": 1749074157000,
                "Total Samples": 319,
                "provider.clusterName": "minikube-kafka"
              },
              {
                "facet": "strimzi-kafka-cluster",
                "Earliest Timestamp": 1749071691000,
                "Latest Timestamp": 1749074153000,
                "Total Samples": 83,
                "provider.clusterName": "strimzi-kafka-cluster"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 2
        },
        {
          "category": "Edge Cases",
          "query": {
            "id": "11.3",
            "name": "Partial Data Check",
            "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070573868,
                "end": 1749074173868
              }
            },
            "results": [
              {
                "Missing Bytes In": 1577,
                "Missing Bytes Out": 1577,
                "Total Topics": 1577
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 3,
        "success": 3,
        "hasData": 3,
        "failed": 0
      }
    },
    "Top N Analysis": {
      "queries": [
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.1",
            "name": "Top 10 Topics by Throughput",
            "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
            "critical": false
          },
          "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070573839,
                "end": 1749074173839
              }
            },
            "results": [
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-events",
                "Avg Bytes In": null,
                "Sample Count": 395,
                "displayName": "aws-msk-topic:minikube-kafka-topic-events"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-logs",
                "Avg Bytes In": null,
                "Sample Count": 395,
                "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
                "Avg Bytes In": null,
                "Sample Count": 394,
                "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
              },
              {
                "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
                "Avg Bytes In": null,
                "Sample Count": 393,
                "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 4
        },
        {
          "category": "Top N Analysis",
          "query": {
            "id": "12.2",
            "name": "Top 5 Clusters by Size",
            "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070574459,
                "end": 1749074174459
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Broker Count": 1,
                "Topic Count": 5,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Confluent Cloud Compatibility": {
      "queries": [
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.1",
            "name": "Common Throughput Pattern",
            "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070574430,
                "end": 1749074174430
              }
            },
            "results": [
              {
                "Has Bytes In": 198,
                "Has Bytes Out": 198
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Confluent Cloud Compatibility",
          "query": {
            "id": "13.2",
            "name": "Common Message Pattern",
            "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070574399,
                "end": 1749074174399
              }
            },
            "results": [
              {
                "Has Messages In": 198,
                "Has Messages Out": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Filter Validation": {
      "queries": [
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.1",
            "name": "Available Clusters",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070574426,
                "end": 1749074174426
              }
            },
            "results": [
              {
                "Total Samples": 401
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 401
        },
        {
          "category": "Filter Validation",
          "query": {
            "id": "14.2",
            "name": "Available Topics",
            "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070574407,
                "end": 1749074174407
              }
            },
            "results": [
              {
                "Total Samples": 1577
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1577
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Metric Calculations": {
      "queries": [
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.1",
            "name": "Throughput Range",
            "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070575014,
                "end": 1749074175014
              }
            },
            "results": [
              {
                "facet": "minikube-kafka",
                "Avg Throughput": 949.5419796546095,
                "Max Throughput": 1746.25,
                "Min Throughput": 0,
                "provider.clusterName": "minikube-kafka"
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Metric Calculations",
          "query": {
            "id": "15.2",
            "name": "Percentage Calculations",
            "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample"
              ],
              "timeWindow": {
                "begin": 1749070574957,
                "end": 1749074174957
              }
            },
            "results": [
              {
                "Total": 0,
                "Unhealthy": 0,
                "Unhealthy %": null
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    },
    "Summary Verification": {
      "queries": [
        {
          "category": "Summary Verification",
          "query": {
            "id": "16.1",
            "name": "Complete Data Check",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
            "critical": true
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "AwsMskClusterSample",
                "AwsMskBrokerSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070574985,
                "end": 1749074174985
              }
            },
            "results": [
              {
                "Has Broker Data": 318,
                "Has Cluster Data": 401,
                "Has Topic Data": 1577,
                "Newest Data": 1749074157000,
                "Oldest Data": 1749070604000
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 1,
        "success": 1,
        "hasData": 1,
        "failed": 0
      }
    },
    "Standard vs MSK Comparison": {
      "queries": [
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.1",
            "name": "Entity Count Comparison",
            "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaBrokerSample",
                "AwsMskBrokerSample"
              ],
              "timeWindow": {
                "begin": 1749070574976,
                "end": 1749074174976
              }
            },
            "results": [
              {
                "MSK Brokers": 2,
                "Standard Brokers": 0
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        },
        {
          "category": "Standard vs MSK Comparison",
          "query": {
            "id": "17.2",
            "name": "Metric Coverage Comparison",
            "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
            "critical": false
          },
          "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
          "result": {
            "metadata": {
              "eventTypes": [
                "KafkaTopicSample",
                "AwsMskTopicSample"
              ],
              "timeWindow": {
                "begin": 1749070574953,
                "end": 1749074174953
              }
            },
            "results": [
              {
                "MSK Topic Events": 1577,
                "Standard Topic Events": 480
              }
            ]
          },
          "success": true,
          "hasData": true,
          "resultCount": 1
        }
      ],
      "summary": {
        "total": 2,
        "success": 2,
        "hasData": 2,
        "failed": 0
      }
    }
  },
  "details": [
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.1",
        "name": "Cluster Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070570043,
            "end": 1749074170043
          }
        },
        "results": [
          {
            "count": 402
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 402
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.2",
        "name": "All Cluster Metrics Present",
        "query": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.activeControllerCount.Sum) as 'Has Active Controller Count',\n          count(provider.offlinePartitionsCount.Sum) as 'Has Offline Partitions Count',\n          count(provider.globalPartitionCount.Average) as 'Has Global Partition Count'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070570076,
            "end": 1749074170076
          }
        },
        "results": [
          {
            "Has Active Controller Count": 402,
            "Has Global Partition Count": 0,
            "Has Offline Partitions Count": 281
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.3",
        "name": "Broker Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT count(*) FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070570012,
            "end": 1749074170012
          }
        },
        "results": [
          {
            "count": 319
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 319
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.4",
        "name": "All Broker Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out',\n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070570091,
            "end": 1749074170091
          }
        },
        "results": [
          {
            "Has Bytes In": 198,
            "Has Bytes Out": 198,
            "Has Messages In": 198,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.5",
        "name": "Topic Sample Data Exists",
        "query": "SELECT count(*) FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070570002,
            "end": 1749074170002
          }
        },
        "results": [
          {
            "count": 1577
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1577
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.6",
        "name": "Topic Metrics Present",
        "query": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Sum) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Sum) as 'Has Bytes Out'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070570515,
            "end": 1749074170515
          }
        },
        "results": [
          {
            "Has Bytes In": 0,
            "Has Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.7",
        "name": "Cluster Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(entity.guid) as 'Has Entity GUID',\n          count(entityName) as 'Has Entity Name'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070570486,
            "end": 1749074170486
          }
        },
        "results": [
          {
            "Has Cluster Name": 402,
            "Has Entity GUID": 0,
            "Has Entity Name": 402
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.8",
        "name": "Broker Attributes Present",
        "query": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          count(provider.clusterName) as 'Has Cluster Name',\n          count(provider.brokerId) as 'Has Broker ID',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070570498,
            "end": 1749074170498
          }
        },
        "results": [
          {
            "Has Broker ID": 319,
            "Has Cluster Name": 319,
            "Has Entity GUID": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "MSK Polling Data",
      "query": {
        "id": "1.9",
        "name": "Topic Attributes Present",
        "query": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.topic) as 'Has Topic Name',\n          count(displayName) as 'Has Display Name',\n          count(entity.guid) as 'Has Entity GUID'\n        FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070570457,
            "end": 1749074170457
          }
        },
        "results": [
          {
            "Has Display Name": 1577,
            "Has Entity GUID": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.1",
        "name": "Metric Events Exist",
        "query": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM Metric WHERE metricName LIKE 'newrelic.goldenmetrics%' OR metricName LIKE 'kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070570512,
            "end": 1749074170512
          }
        },
        "results": [
          {
            "count": 7158
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 7158
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.2",
        "name": "Cluster-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.ActiveControllerCount') as 'Active Controller',\n          filter(count(*), WHERE metricName = 'aws.kafka.OfflinePartitionsCount') as 'Offline Partitions',\n          filter(count(*), WHERE metricName = 'aws.kafka.GlobalPartitionCount') as 'Global Partitions'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070570932,
            "end": 1749074170932
          }
        },
        "results": [
          {
            "Active Controller": 0,
            "Global Partitions": 0,
            "Offline Partitions": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.3",
        "name": "Broker-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byBroker') as 'Broker Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byBroker') as 'Broker Bytes Out',\n          filter(count(*), WHERE metricName = 'aws.kafka.UnderReplicatedPartitions') as 'Under Replicated'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070570882,
            "end": 1749074170882
          }
        },
        "results": [
          {
            "Broker Bytes In": 0,
            "Broker Bytes Out": 0,
            "Under Replicated": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.4",
        "name": "Topic-Level Metrics",
        "query": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE metricName = 'aws.kafka.BytesInPerSec.byTopic') as 'Topic Bytes In',\n          filter(count(*), WHERE metricName = 'aws.kafka.BytesOutPerSec.byTopic') as 'Topic Bytes Out'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070570902,
            "end": 1749074170902
          }
        },
        "results": [
          {
            "Topic Bytes In": 0,
            "Topic Bytes Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Streams Data",
      "query": {
        "id": "2.5",
        "name": "Metric Streams Attributes",
        "query": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(aws.kafka.ClusterName OR aws.msk.clusterName) as 'Has Cluster Name',\n          count(aws.kafka.BrokerID OR aws.msk.brokerId) as 'Has Broker ID',\n          count(aws.kafka.Topic OR aws.msk.topic) as 'Has Topic Name'\n        FROM Metric WHERE metricName LIKE 'aws.kafka%' SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070570913,
            "end": 1749074170913
          }
        },
        "results": [
          {
            "Has Broker ID": 0,
            "Has Cluster Name": 0,
            "Has Topic Name": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.1",
        "name": "Broker Sample Data",
        "query": "SELECT count(*) FROM KafkaBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070570874,
            "end": 1749074170874
          }
        },
        "results": [
          {
            "count": 1595
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1595
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.2",
        "name": "Topic Sample Data",
        "query": "SELECT count(*) FROM KafkaTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070571348,
            "end": 1749074171348
          }
        },
        "results": [
          {
            "count": 484
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 484
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.3",
        "name": "Offset Sample Data",
        "query": "SELECT count(*) FROM KafkaOffsetSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaOffsetSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaOffsetSample"
          ],
          "timeWindow": {
            "begin": 1749070571333,
            "end": 1749074171333
          }
        },
        "results": [
          {
            "count": 3912
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 3912
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.4",
        "name": "Producer Sample Data",
        "query": "SELECT count(*) FROM KafkaProducerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaProducerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaProducerSample"
          ],
          "timeWindow": {
            "begin": 1749070571317,
            "end": 1749074171317
          }
        },
        "results": [
          {
            "count": 29
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 29
    },
    {
      "category": "Standard Kafka Integration",
      "query": {
        "id": "3.5",
        "name": "Consumer Sample Data",
        "query": "SELECT count(*) FROM KafkaConsumerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) FROM KafkaConsumerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaConsumerSample"
          ],
          "timeWindow": {
            "begin": 1749070571301,
            "end": 1749074171301
          }
        },
        "results": [
          {
            "count": 108
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 108
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.1",
        "name": "Check for Null Values",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE provider.activeControllerCount.Sum IS NULL) as 'Null Active Controllers',\n          filter(count(*), WHERE provider.offlinePartitionsCount.Sum IS NULL) as 'Null Offline Partitions',\n          filter(count(*), WHERE provider.clusterName IS NULL) as 'Null Cluster Names'\n        FROM AwsMskClusterSample \n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070571299,
            "end": 1749074171299
          }
        },
        "results": [
          {
            "Null Active Controllers": 0,
            "Null Cluster Names": 0,
            "Null Offline Partitions": 121,
            "Total Records": 402
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.2",
        "name": "Data Freshness (Polling)",
        "query": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          latest(timestamp) as 'Latest Timestamp'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          latest(timestamp) as 'Latest Timestamp'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070571765,
            "end": 1749074171765
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Last Data Point": 1749074157000,
            "Latest Timestamp": 1749074157000,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Last Data Point": 1749074153000,
            "Latest Timestamp": 1749074153000,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.3",
        "name": "Data Freshness (Metric Streams)",
        "query": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          max(timestamp) as 'Latest Timestamp',\n          count(*) as 'Total Metric Points'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        FACET entity.name\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          latest(timestamp) as 'Last Data Point',\n          max(timestamp) as 'Latest Timestamp',\n          count(*) as 'Total Metric Points'\n        FROM Metric \n        WHERE metricName LIKE 'newrelic.goldenmetrics.infra.kafkabroker%'\n        FACET entity.name\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "Metric"
          ],
          "timeWindow": {
            "begin": 1749070571748,
            "end": 1749074171748
          }
        },
        "results": [
          {
            "facet": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092",
            "Last Data Point": 1749074100000,
            "Latest Timestamp": 1749074100000,
            "Total Metric Points": 1196,
            "entity.name": "broker:kafka-0.kafka-headless.kafka.svc.cluster.local:9092"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.4",
        "name": "Tag Completeness",
        "query": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Records',\n          filter(count(*), WHERE environment IS NOT NULL) as 'Has Environment Tag',\n          filter(count(*), WHERE label.env IS NOT NULL) as 'Has Environment Label',\n          filter(count(*), WHERE label.cluster IS NOT NULL) as 'Has Cluster Label',\n          filter(count(*), WHERE label.integration IS NOT NULL) as 'Has Integration Label'\n        FROM AwsMskClusterSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070571709,
            "end": 1749074171709
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Has Cluster Label": 200,
            "Has Environment Label": 200,
            "Has Environment Tag": 319,
            "Has Integration Label": 200,
            "Total Records": 319,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Has Cluster Label": 83,
            "Has Environment Label": 83,
            "Has Environment Tag": 83,
            "Has Integration Label": 83,
            "Total Records": 83,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Data Quality",
      "query": {
        "id": "4.5",
        "name": "Data Consistency Check",
        "query": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.clusterName) as `Clusters in ClusterSample` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070571706,
            "end": 1749074171706
          }
        },
        "results": [
          {
            "Clusters in ClusterSample": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.1",
        "name": "Cluster Throughput Summary",
        "query": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          sum(provider.bytesInPerSec.Average) as 'Total Bytes In/Sec',\n          sum(provider.bytesOutPerSec.Average) as 'Total Bytes Out/Sec',\n          sum(provider.messagesInPerSec.Average) as 'Total Messages In/Sec'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070571738,
            "end": 1749074171738
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Total Bytes In/Sec": 187691.32061793396,
            "Total Bytes Out/Sec": 382069.0967360694,
            "Total Messages In/Sec": 2217.3772925273606,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.2",
        "name": "Throughput Aggregation",
        "query": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(bytesInPerSec) as 'Total Incoming', sum(bytesOutPerSec) as 'Total Outgoing'\n        FROM (\n          SELECT average(provider.bytesInPerSec.Average) as 'bytesInPerSec',\n                 average(provider.bytesOutPerSec.Average) as 'bytesOutPerSec'\n          FROM AwsMskBrokerSample\n          FACET provider.clusterName as cluster, provider.brokerId\n          LIMIT MAX\n        ) SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [],
          "timeWindow": {
            "begin": 1749070572270,
            "end": 1749074172270
          }
        },
        "results": [
          {
            "Total Incoming": 947.9359627168382,
            "Total Outgoing": 1929.6419027074214
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.3",
        "name": "Topic Throughput",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Sum) OR 0 AS 'Bytes In/Sec',\n          latest(provider.bytesOutPerSec.Sum) OR 0 AS 'Bytes Out/Sec'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070572340,
            "end": 1749074172340
          }
        },
        "results": [
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-events",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-events"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-logs",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
            "Bytes In/Sec": 0,
            "Bytes Out/Sec": 0,
            "constant": 0,
            "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Throughput Calculations",
      "query": {
        "id": "5.4",
        "name": "Message Rates",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Total Messages In'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070572308,
            "end": 1749074172308
          }
        },
        "results": [
          {
            "Total Messages In": 2217.3772925273606
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2217.3772925273606
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.1",
        "name": "Brokers per Cluster",
        "query": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(provider.brokerId) as 'Broker Count'\n        FROM AwsMskBrokerSample \n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070572458,
            "end": 1749074172458
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.2",
        "name": "Topics per Cluster",
        "query": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070572290,
            "end": 1749074172290
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Entity Relationships",
      "query": {
        "id": "6.3",
        "name": "Entity GUIDs Present",
        "query": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(entity.guid) as 'Total Entity GUIDs',\n          uniqueCount(entity.guid) as 'Unique Entity GUIDs'\n        FROM AwsMskBrokerSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070572928,
            "end": 1749074172928
          }
        },
        "results": [
          {
            "Total Entity GUIDs": 0,
            "Unique Entity GUIDs": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.1",
        "name": "Cluster Health Status",
        "query": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          latest(provider.activeControllerCount.Sum) as 'Active Controllers',\n          latest(provider.offlinePartitionsCount.Sum) as 'Offline Partitions'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070572962,
            "end": 1749074172962
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Active Controllers": 1,
            "Offline Partitions": 0,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.2",
        "name": "Broker Health Status",
        "query": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE {timeRange}\n        LIMIT 20",
        "critical": false
      },
      "nrql": "SELECT \n          latest(provider.bytesInPerSec.Average) as 'Bytes In Rate',\n          latest(provider.bytesOutPerSec.Average) as 'Bytes Out Rate',\n          latest(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName, provider.brokerId\n        SINCE 1 hour ago\n        LIMIT 20",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070572909,
            "end": 1749074172909
          }
        },
        "results": [
          {
            "facet": [
              "minikube-kafka",
              "1"
            ],
            "Bytes In Rate": 1505.4666666666667,
            "Bytes Out Rate": 2857.3333333333335,
            "Message Rate": 16.7
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Health Metrics",
      "query": {
        "id": "7.3",
        "name": "Unhealthy Cluster Count",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070572908,
            "end": 1749074172908
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.1",
        "name": "Throughput Time Series",
        "query": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.bytesInPerSec.Average) as 'Incoming Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070572930,
            "end": 1749074172930
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749070572,
            "endTimeSeconds": 1749070872,
            "Incoming Throughput": 1577.5204301075269,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749070872,
            "endTimeSeconds": 1749071172,
            "Incoming Throughput": 8638.657471264367,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749071172,
            "endTimeSeconds": 1749071472,
            "Incoming Throughput": 6383.874638487207,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749071472,
            "endTimeSeconds": 1749071772,
            "Incoming Throughput": 7676.215016685205,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749071772,
            "endTimeSeconds": 1749072072,
            "Incoming Throughput": 16856.064293659623,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072072,
            "endTimeSeconds": 1749072372,
            "Incoming Throughput": 18276.08487208009,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072372,
            "endTimeSeconds": 1749072672,
            "Incoming Throughput": 23019.477559722447,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072672,
            "endTimeSeconds": 1749072972,
            "Incoming Throughput": 19726.597851448696,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749072972,
            "endTimeSeconds": 1749073272,
            "Incoming Throughput": 21857.4227289581,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073272,
            "endTimeSeconds": 1749073572,
            "Incoming Throughput": 21416.06879083768,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073572,
            "endTimeSeconds": 1749073872,
            "Incoming Throughput": 22424.427027715985,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "minikube-kafka",
            "beginTimeSeconds": 1749073872,
            "endTimeSeconds": 1749074172,
            "Incoming Throughput": 19838.909936967004,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.2",
        "name": "Message Rate Time Series",
        "query": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT sum(provider.messagesInPerSec.Average) as 'Message Rate'\n        FROM AwsMskBrokerSample\n        TIMESERIES 5 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070573484,
            "end": 1749074173484
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749070573,
            "endTimeSeconds": 1749070873,
            "Message Rate": 18.589247311827958
          },
          {
            "beginTimeSeconds": 1749070873,
            "endTimeSeconds": 1749071173,
            "Message Rate": 131.9525769373378
          },
          {
            "beginTimeSeconds": 1749071173,
            "endTimeSeconds": 1749071473,
            "Message Rate": 100.3680385613645
          },
          {
            "beginTimeSeconds": 1749071473,
            "endTimeSeconds": 1749071773,
            "Message Rate": 123.0823878383389
          },
          {
            "beginTimeSeconds": 1749071773,
            "endTimeSeconds": 1749072073,
            "Message Rate": 222.22295142751207
          },
          {
            "beginTimeSeconds": 1749072073,
            "endTimeSeconds": 1749072373,
            "Message Rate": 217.52513904338156
          },
          {
            "beginTimeSeconds": 1749072373,
            "endTimeSeconds": 1749072673,
            "Message Rate": 248.29654113035645
          },
          {
            "beginTimeSeconds": 1749072673,
            "endTimeSeconds": 1749072973,
            "Message Rate": 225.47963288333838
          },
          {
            "beginTimeSeconds": 1749072973,
            "endTimeSeconds": 1749073273,
            "Message Rate": 232.84757137560246
          },
          {
            "beginTimeSeconds": 1749073273,
            "endTimeSeconds": 1749073573,
            "Message Rate": 233.58694171669535
          },
          {
            "beginTimeSeconds": 1749073573,
            "endTimeSeconds": 1749073873,
            "Message Rate": 241.19489611473065
          },
          {
            "beginTimeSeconds": 1749073873,
            "endTimeSeconds": 1749074173,
            "Message Rate": 222.2313681868743
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 12
    },
    {
      "category": "Time Series Data",
      "query": {
        "id": "8.3",
        "name": "Partition Count Trend",
        "query": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT average(provider.globalPartitionCount.Average) as 'Partitions'\n        FROM AwsMskClusterSample\n        TIMESERIES 10 minutes\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070573453,
            "end": 1749074173453
          }
        },
        "results": [
          {
            "beginTimeSeconds": 1749070573,
            "endTimeSeconds": 1749071173,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749071173,
            "endTimeSeconds": 1749071773,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749071773,
            "endTimeSeconds": 1749072373,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749072373,
            "endTimeSeconds": 1749072973,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749072973,
            "endTimeSeconds": 1749073573,
            "Partitions": null
          },
          {
            "beginTimeSeconds": 1749073573,
            "endTimeSeconds": 1749074173,
            "Partitions": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 6
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.1",
        "name": "Account Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Cluster Count',\n          uniqueCount(provider.clusterName) as 'Named Cluster Count'\n        FROM AwsMskClusterSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070573437,
            "end": 1749074173437
          }
        },
        "results": [
          {
            "Cluster Count": 0,
            "Named Cluster Count": 2
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Account Aggregation",
      "query": {
        "id": "9.2",
        "name": "Account Health Summary",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total Clusters',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy Clusters'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070573454,
            "end": 1749074173454
          }
        },
        "results": [
          {
            "Total Clusters": 0,
            "Unhealthy Clusters": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.1",
        "name": "Data Volume Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Cluster Events',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Broker Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Topic Events'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070573450,
            "end": 1749074173450
          }
        },
        "results": [
          {
            "Broker Events": 319,
            "Cluster Events": 402,
            "Topic Events": 1577
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Performance Metrics",
      "query": {
        "id": "10.2",
        "name": "Large Dataset Check",
        "query": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(displayName) as 'Topic Count',\n          count(*) as 'Total Events'\n        FROM AwsMskTopicSample\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070573898,
            "end": 1749074173898
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Topic Count": 4,
            "Total Events": 1577,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.1",
        "name": "Idle Topics",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In',\n          average(provider.bytesOutPerSec.Sum) as 'Avg Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070573848,
            "end": 1749074173848
          }
        },
        "results": [
          {
            "Avg Bytes In": null,
            "Avg Bytes Out": null,
            "Total Topics": 1577
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.2",
        "name": "Stale Data Detection",
        "query": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Samples',\n          max(timestamp) as 'Latest Timestamp',\n          min(timestamp) as 'Earliest Timestamp'\n        FROM AwsMskClusterSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070573868,
            "end": 1749074173868
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Earliest Timestamp": 1749070574000,
            "Latest Timestamp": 1749074157000,
            "Total Samples": 319,
            "provider.clusterName": "minikube-kafka"
          },
          {
            "facet": "strimzi-kafka-cluster",
            "Earliest Timestamp": 1749071691000,
            "Latest Timestamp": 1749074153000,
            "Total Samples": 83,
            "provider.clusterName": "strimzi-kafka-cluster"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 2
    },
    {
      "category": "Edge Cases",
      "query": {
        "id": "11.3",
        "name": "Partial Data Check",
        "query": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Total Topics',\n          filter(count(*), WHERE provider.bytesInPerSec.Sum IS NULL) as 'Missing Bytes In',\n          filter(count(*), WHERE provider.bytesOutPerSec.Sum IS NULL) as 'Missing Bytes Out'\n        FROM AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070573868,
            "end": 1749074173868
          }
        },
        "results": [
          {
            "Missing Bytes In": 1577,
            "Missing Bytes Out": 1577,
            "Total Topics": 1577
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.1",
        "name": "Top 10 Topics by Throughput",
        "query": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE {timeRange}\n        LIMIT 10",
        "critical": false
      },
      "nrql": "SELECT \n          count(*) as 'Sample Count',\n          average(provider.bytesInPerSec.Sum) as 'Avg Bytes In'\n        FROM AwsMskTopicSample\n        FACET displayName\n        SINCE 1 hour ago\n        LIMIT 10",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070573839,
            "end": 1749074173839
          }
        },
        "results": [
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-events",
            "Avg Bytes In": null,
            "Sample Count": 395,
            "displayName": "aws-msk-topic:minikube-kafka-topic-events"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-logs",
            "Avg Bytes In": null,
            "Sample Count": 395,
            "displayName": "aws-msk-topic:minikube-kafka-topic-logs"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets",
            "Avg Bytes In": null,
            "Sample Count": 394,
            "displayName": "aws-msk-topic:minikube-kafka-topic-__consumer_offsets"
          },
          {
            "facet": "aws-msk-topic:minikube-kafka-topic-metrics",
            "Avg Bytes In": null,
            "Sample Count": 393,
            "displayName": "aws-msk-topic:minikube-kafka-topic-metrics"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 4
    },
    {
      "category": "Top N Analysis",
      "query": {
        "id": "12.2",
        "name": "Top 5 Clusters by Size",
        "query": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE {timeRange}\n        LIMIT 5",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(provider.brokerId) as 'Broker Count',\n          uniqueCount(displayName) as 'Topic Count'\n        FROM AwsMskBrokerSample, AwsMskTopicSample\n        WHERE provider.clusterName IS NOT NULL\n        FACET provider.clusterName\n        SINCE 1 hour ago\n        LIMIT 5",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070574459,
            "end": 1749074174459
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Broker Count": 1,
            "Topic Count": 5,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.1",
        "name": "Common Throughput Pattern",
        "query": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.bytesInPerSec.Average) as 'Has Bytes In',\n          count(provider.bytesOutPerSec.Average) as 'Has Bytes Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070574430,
            "end": 1749074174430
          }
        },
        "results": [
          {
            "Has Bytes In": 198,
            "Has Bytes Out": 198
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Confluent Cloud Compatibility",
      "query": {
        "id": "13.2",
        "name": "Common Message Pattern",
        "query": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          count(provider.messagesInPerSec.Average) as 'Has Messages In',\n          count(provider.messagesOutPerSec.Average) as 'Has Messages Out'\n        FROM AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070574399,
            "end": 1749074174399
          }
        },
        "results": [
          {
            "Has Messages In": 198,
            "Has Messages Out": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.1",
        "name": "Available Clusters",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070574426,
            "end": 1749074174426
          }
        },
        "results": [
          {
            "Total Samples": 401
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 401
    },
    {
      "category": "Filter Validation",
      "query": {
        "id": "14.2",
        "name": "Available Topics",
        "query": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT count(*) as `Total Samples` FROM AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070574407,
            "end": 1749074174407
          }
        },
        "results": [
          {
            "Total Samples": 1577
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1577
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.1",
        "name": "Throughput Range",
        "query": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          min(provider.bytesInPerSec.Average) as 'Min Throughput',\n          max(provider.bytesInPerSec.Average) as 'Max Throughput',\n          average(provider.bytesInPerSec.Average) as 'Avg Throughput'\n        FROM AwsMskBrokerSample\n        FACET provider.clusterName\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070575014,
            "end": 1749074175014
          }
        },
        "results": [
          {
            "facet": "minikube-kafka",
            "Avg Throughput": 949.5419796546095,
            "Max Throughput": 1746.25,
            "Min Throughput": 0,
            "provider.clusterName": "minikube-kafka"
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Metric Calculations",
      "query": {
        "id": "15.2",
        "name": "Percentage Calculations",
        "query": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          uniqueCount(entity.guid) as 'Total',\n          filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) as 'Unhealthy',\n          100.0 * filter(uniqueCount(entity.guid), WHERE provider.offlinePartitionsCount.Sum > 0) / uniqueCount(entity.guid) as 'Unhealthy %'\n        FROM AwsMskClusterSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample"
          ],
          "timeWindow": {
            "begin": 1749070574957,
            "end": 1749074174957
          }
        },
        "results": [
          {
            "Total": 0,
            "Unhealthy": 0,
            "Unhealthy %": null
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Summary Verification",
      "query": {
        "id": "16.1",
        "name": "Complete Data Check",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE {timeRange}",
        "critical": true
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'AwsMskClusterSample') as 'Has Cluster Data',\n          filter(count(*), WHERE eventType() = 'AwsMskBrokerSample') as 'Has Broker Data',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'Has Topic Data',\n          min(timestamp) as 'Oldest Data',\n          max(timestamp) as 'Newest Data',\n          max(timestamp) as 'Newest Data'\n        FROM AwsMskClusterSample, AwsMskBrokerSample, AwsMskTopicSample\n        SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "AwsMskClusterSample",
            "AwsMskBrokerSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070574985,
            "end": 1749074174985
          }
        },
        "results": [
          {
            "Has Broker Data": 318,
            "Has Cluster Data": 401,
            "Has Topic Data": 1577,
            "Newest Data": 1749074157000,
            "Oldest Data": 1749070604000
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.1",
        "name": "Entity Count Comparison",
        "query": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(uniqueCount(entityName), WHERE eventType() = 'KafkaBrokerSample') as 'Standard Brokers',\n          filter(uniqueCount(entityName), WHERE eventType() = 'AwsMskBrokerSample') as 'MSK Brokers'\n        FROM KafkaBrokerSample, AwsMskBrokerSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaBrokerSample",
            "AwsMskBrokerSample"
          ],
          "timeWindow": {
            "begin": 1749070574976,
            "end": 1749074174976
          }
        },
        "results": [
          {
            "MSK Brokers": 2,
            "Standard Brokers": 0
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    },
    {
      "category": "Standard vs MSK Comparison",
      "query": {
        "id": "17.2",
        "name": "Metric Coverage Comparison",
        "query": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE {timeRange}",
        "critical": false
      },
      "nrql": "SELECT \n          filter(count(*), WHERE eventType() = 'KafkaTopicSample') as 'Standard Topic Events',\n          filter(count(*), WHERE eventType() = 'AwsMskTopicSample') as 'MSK Topic Events'\n        FROM KafkaTopicSample, AwsMskTopicSample SINCE 1 hour ago",
      "result": {
        "metadata": {
          "eventTypes": [
            "KafkaTopicSample",
            "AwsMskTopicSample"
          ],
          "timeWindow": {
            "begin": 1749070574953,
            "end": 1749074174953
          }
        },
        "results": [
          {
            "MSK Topic Events": 1577,
            "Standard Topic Events": 480
          }
        ]
      },
      "success": true,
      "hasData": true,
      "resultCount": 1
    }
  ]
}