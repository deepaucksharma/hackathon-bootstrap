apiVersion: v1
kind: Pod
metadata:
  name: jmx-network-diagnostic
  namespace: kafka
spec:
  containers:
  - name: tcpdump
    image: nicolaka/netshoot
    command: ["sleep", "3600"]
    securityContext:
      capabilities:
        add:
        - NET_RAW
        - NET_ADMIN
    volumeMounts:
    - name: scripts
      mountPath: /scripts
  - name: jmx-tools
    image: openjdk:11
    command: ["sleep", "3600"]
    volumeMounts:
    - name: scripts
      mountPath: /scripts
  volumes:
  - name: scripts
    configMap:
      name: jmx-diagnostic-scripts
      defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jmx-diagnostic-scripts
  namespace: kafka
data:
  test-jmx-connection.sh: |
    #!/bin/bash
    # Test JMX connection with detailed output
    
    HOST=$1
    PORT=${2:-9999}
    
    echo "Testing JMX connection to $HOST:$PORT"
    
    # Create Java test program
    cat > /tmp/JMXDebug.java << 'EOF'
    import javax.management.*;
    import javax.management.remote.*;
    import java.util.*;
    import java.io.*;
    import java.net.*;
    
    public class JMXDebug {
        public static void main(String[] args) throws Exception {
            String host = args[0];
            String port = args[1];
            
            System.out.println("=== JMX Connection Debug ===");
            System.out.println("Target: " + host + ":" + port);
            
            // Test basic connectivity
            System.out.println("\n1. Testing TCP connectivity...");
            try (Socket socket = new Socket(host, Integer.parseInt(port))) {
                System.out.println("   ✓ TCP connection successful");
                System.out.println("   Local: " + socket.getLocalSocketAddress());
                System.out.println("   Remote: " + socket.getRemoteSocketAddress());
            } catch (Exception e) {
                System.out.println("   ✗ TCP connection failed: " + e.getMessage());
                return;
            }
            
            // Test JMX connection
            System.out.println("\n2. Testing JMX/RMI connection...");
            String url = "service:jmx:rmi:///jndi/rmi://" + host + ":" + port + "/jmxrmi";
            System.out.println("   URL: " + url);
            
            Map<String, Object> env = new HashMap<>();
            env.put(JMXConnector.CREDENTIALS, new String[]{"", ""});
            
            try {
                JMXServiceURL serviceUrl = new JMXServiceURL(url);
                JMXConnector connector = JMXConnectorFactory.connect(serviceUrl, env);
                MBeanServerConnection connection = connector.getMBeanServerConnection();
                
                System.out.println("   ✓ JMX connection successful!");
                System.out.println("   MBean count: " + connection.getMBeanCount());
                
                // List Kafka domains
                System.out.println("\n3. Kafka MBeans:");
                Set<ObjectName> kafkaBeans = connection.queryNames(new ObjectName("kafka.*:*"), null);
                for (ObjectName bean : kafkaBeans) {
                    System.out.println("   - " + bean);
                    if (kafkaBeans.size() > 10) {
                        System.out.println("   ... (showing first 10)");
                        break;
                    }
                }
                
                connector.close();
            } catch (Exception e) {
                System.out.println("   ✗ JMX connection failed!");
                System.out.println("   Error: " + e.getClass().getName() + ": " + e.getMessage());
                
                // Print full stack trace for debugging
                System.out.println("\n   Stack trace:");
                e.printStackTrace();
            }
        }
    }
    EOF
    
    # Compile and run
    cd /tmp
    javac JMXDebug.java
    java JMXDebug $HOST $PORT
    
  capture-jmx-traffic.sh: |
    #!/bin/bash
    # Capture JMX network traffic
    
    TARGET=$1
    echo "Capturing JMX traffic to $TARGET..."
    
    # Start packet capture
    tcpdump -i any -w /tmp/jmx-capture.pcap -s 0 "host $TARGET and (port 9999 or port 9092)" &
    TCPDUMP_PID=$!
    
    echo "Packet capture started (PID: $TCPDUMP_PID)"
    echo "Press Ctrl+C to stop..."
    
    # Wait for interrupt
    trap "kill $TCPDUMP_PID; echo 'Capture stopped'; tcpdump -r /tmp/jmx-capture.pcap -nn | head -50" INT
    wait $TCPDUMP_PID
    
  test-rmi-registry.sh: |
    #!/bin/bash
    # Test RMI registry directly
    
    HOST=$1
    PORT=${2:-9999}
    
    echo "Testing RMI Registry at $HOST:$PORT"
    
    # Use Java to query RMI registry
    cat > /tmp/RMITest.java << 'EOF'
    import java.rmi.registry.*;
    import java.rmi.*;
    
    public class RMITest {
        public static void main(String[] args) throws Exception {
            String host = args[0];
            int port = Integer.parseInt(args[1]);
            
            System.out.println("Connecting to RMI Registry at " + host + ":" + port);
            
            try {
                Registry registry = LocateRegistry.getRegistry(host, port);
                String[] names = registry.list();
                
                System.out.println("Registry entries:");
                for (String name : names) {
                    System.out.println("  - " + name);
                    try {
                        Remote obj = registry.lookup(name);
                        System.out.println("    Type: " + obj.getClass().getName());
                    } catch (Exception e) {
                        System.out.println("    Error: " + e.getMessage());
                    }
                }
            } catch (Exception e) {
                System.out.println("Failed to connect: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
    EOF
    
    cd /tmp
    javac RMITest.java
    java RMITest $HOST $PORT