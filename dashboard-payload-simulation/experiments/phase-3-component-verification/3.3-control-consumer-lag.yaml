name: "Phase 3 / Test 3.3: Control Consumer Lag Display"
description: "Verify consumerLag metrics control lag visualization"
baseTemplate: "reference/working-account-samples/broker-events.json"

modifications:
  - action: "set"
    path: "entityName"
    value: "p3-lag-broker-${timestamp}"
  - action: "set"
    path: "_experimentId"
    value: "${experimentId}"
  - action: "set"
    path: "timestamp"
    value: "${timestamp}"
  - action: "set"
    path: "provider.consumerLag.Sum"
    value: 100000
  - action: "set"
    path: "provider.consumerLag.Average"
    value: 50000
  - action: "set"
    path: "provider.consumerLag.Maximum"
    value: 75000
  - action: "set"
    path: "provider.consumerLag.Minimum"
    value: 25000
  - action: "set"
    path: "provider.consumerLag.SampleCount"
    value: 10

verification:
  timeout: 300
  initialDelay: 30
  checks:
    - type: "entityExists"
      details: 
        entityName: "p3-lag-broker-${timestamp}"
        entityType: "AWS_KAFKA_BROKER"
    
    - type: "metricValueCheck"
      details:
        entityName: "p3-lag-broker-${timestamp}"
        metricName: "provider.consumerLag.Average"
        expectedValue: 50000
    
    - type: "alertingCondition"
      details:
        entityName: "p3-lag-broker-${timestamp}"
        condition: "provider.consumerLag.Average > 10000"
        shouldTrigger: true
    
    - type: "entityIsVisibleInUi"
      details:
        entityName: "p3-lag-broker-${timestamp}"
        uiContext: "queuesAndStreams"

expectedOutcome: "ALL_PASS"
keyInsight: "consumerLag metrics control lag visualization and alerting"